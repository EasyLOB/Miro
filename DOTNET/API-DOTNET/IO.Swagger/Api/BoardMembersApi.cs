/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBoardMembersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all board members
        /// </summary>
        /// <remarks>
        /// Retrieves a pageable list of members for a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>BoardMembersPagedResponse</returns>
        BoardMembersPagedResponse GetBoardMembers (string boardId, string limit = null, string offset = null);

        /// <summary>
        /// Get all board members
        /// </summary>
        /// <remarks>
        /// Retrieves a pageable list of members for a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of BoardMembersPagedResponse</returns>
        ApiResponse<BoardMembersPagedResponse> GetBoardMembersWithHttpInfo (string boardId, string limit = null, string offset = null);
        /// <summary>
        /// Get specific board member
        /// </summary>
        /// <remarks>
        /// Retrieves information for a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to retrieve.</param>
        /// <returns>BoardMemberWithLinks</returns>
        BoardMemberWithLinks GetSpecificBoardMember (string boardId, string boardMemberId);

        /// <summary>
        /// Get specific board member
        /// </summary>
        /// <remarks>
        /// Retrieves information for a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to retrieve.</param>
        /// <returns>ApiResponse of BoardMemberWithLinks</returns>
        ApiResponse<BoardMemberWithLinks> GetSpecificBoardMemberWithHttpInfo (string boardId, string boardMemberId);
        /// <summary>
        /// Remove board member
        /// </summary>
        /// <remarks>
        /// Removes a board member from a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete an item.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to delete.</param>
        /// <returns>Object</returns>
        Object RemoveBoardMember (string boardId, string boardMemberId);

        /// <summary>
        /// Remove board member
        /// </summary>
        /// <remarks>
        /// Removes a board member from a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete an item.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveBoardMemberWithHttpInfo (string boardId, string boardMemberId);
        /// <summary>
        /// Share board
        /// </summary>
        /// <remarks>
        /// Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board&#x27;s Sharing policy, there might be various scenarios where membership in the team is required in order to share the board with a user.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <returns>InvitationResult</returns>
        InvitationResult ShareBoard (BoardMembersInvite body, string boardId);

        /// <summary>
        /// Share board
        /// </summary>
        /// <remarks>
        /// Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board&#x27;s Sharing policy, there might be various scenarios where membership in the team is required in order to share the board with a user.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <returns>ApiResponse of InvitationResult</returns>
        ApiResponse<InvitationResult> ShareBoardWithHttpInfo (BoardMembersInvite body, string boardId);
        /// <summary>
        /// Update board member
        /// </summary>
        /// <remarks>
        /// Updates the role of a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the role of the board member.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to update.</param>
        /// <returns>BoardMemberWithLinks</returns>
        BoardMemberWithLinks UpdateBoardMember (BoardMemberChanges body, string boardId, string boardMemberId);

        /// <summary>
        /// Update board member
        /// </summary>
        /// <remarks>
        /// Updates the role of a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the role of the board member.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to update.</param>
        /// <returns>ApiResponse of BoardMemberWithLinks</returns>
        ApiResponse<BoardMemberWithLinks> UpdateBoardMemberWithHttpInfo (BoardMemberChanges body, string boardId, string boardMemberId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all board members
        /// </summary>
        /// <remarks>
        /// Retrieves a pageable list of members for a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of BoardMembersPagedResponse</returns>
        System.Threading.Tasks.Task<BoardMembersPagedResponse> GetBoardMembersAsync (string boardId, string limit = null, string offset = null);

        /// <summary>
        /// Get all board members
        /// </summary>
        /// <remarks>
        /// Retrieves a pageable list of members for a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (BoardMembersPagedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardMembersPagedResponse>> GetBoardMembersAsyncWithHttpInfo (string boardId, string limit = null, string offset = null);
        /// <summary>
        /// Get specific board member
        /// </summary>
        /// <remarks>
        /// Retrieves information for a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to retrieve.</param>
        /// <returns>Task of BoardMemberWithLinks</returns>
        System.Threading.Tasks.Task<BoardMemberWithLinks> GetSpecificBoardMemberAsync (string boardId, string boardMemberId);

        /// <summary>
        /// Get specific board member
        /// </summary>
        /// <remarks>
        /// Retrieves information for a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to retrieve.</param>
        /// <returns>Task of ApiResponse (BoardMemberWithLinks)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardMemberWithLinks>> GetSpecificBoardMemberAsyncWithHttpInfo (string boardId, string boardMemberId);
        /// <summary>
        /// Remove board member
        /// </summary>
        /// <remarks>
        /// Removes a board member from a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete an item.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to delete.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveBoardMemberAsync (string boardId, string boardMemberId);

        /// <summary>
        /// Remove board member
        /// </summary>
        /// <remarks>
        /// Removes a board member from a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete an item.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveBoardMemberAsyncWithHttpInfo (string boardId, string boardMemberId);
        /// <summary>
        /// Share board
        /// </summary>
        /// <remarks>
        /// Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board&#x27;s Sharing policy, there might be various scenarios where membership in the team is required in order to share the board with a user.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <returns>Task of InvitationResult</returns>
        System.Threading.Tasks.Task<InvitationResult> ShareBoardAsync (BoardMembersInvite body, string boardId);

        /// <summary>
        /// Share board
        /// </summary>
        /// <remarks>
        /// Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board&#x27;s Sharing policy, there might be various scenarios where membership in the team is required in order to share the board with a user.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <returns>Task of ApiResponse (InvitationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationResult>> ShareBoardAsyncWithHttpInfo (BoardMembersInvite body, string boardId);
        /// <summary>
        /// Update board member
        /// </summary>
        /// <remarks>
        /// Updates the role of a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the role of the board member.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to update.</param>
        /// <returns>Task of BoardMemberWithLinks</returns>
        System.Threading.Tasks.Task<BoardMemberWithLinks> UpdateBoardMemberAsync (BoardMemberChanges body, string boardId, string boardMemberId);

        /// <summary>
        /// Update board member
        /// </summary>
        /// <remarks>
        /// Updates the role of a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the role of the board member.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to update.</param>
        /// <returns>Task of ApiResponse (BoardMemberWithLinks)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardMemberWithLinks>> UpdateBoardMemberAsyncWithHttpInfo (BoardMemberChanges body, string boardId, string boardMemberId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BoardMembersApi : IBoardMembersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardMembersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BoardMembersApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardMembersApi"/> class
        /// </summary>
        /// <returns></returns>
        public BoardMembersApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardMembersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BoardMembersApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all board members Retrieves a pageable list of members for a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>BoardMembersPagedResponse</returns>
        public BoardMembersPagedResponse GetBoardMembers (string boardId, string limit = null, string offset = null)
        {
             ApiResponse<BoardMembersPagedResponse> localVarResponse = GetBoardMembersWithHttpInfo(boardId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all board members Retrieves a pageable list of members for a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of BoardMembersPagedResponse</returns>
        public ApiResponse< BoardMembersPagedResponse > GetBoardMembersWithHttpInfo (string boardId, string limit = null, string offset = null)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->GetBoardMembers");

            var localVarPath = "/v2/boards/{board_id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBoardMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardMembersPagedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardMembersPagedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardMembersPagedResponse)));
        }

        /// <summary>
        /// Get all board members Retrieves a pageable list of members for a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of BoardMembersPagedResponse</returns>
        public async System.Threading.Tasks.Task<BoardMembersPagedResponse> GetBoardMembersAsync (string boardId, string limit = null, string offset = null)
        {
             ApiResponse<BoardMembersPagedResponse> localVarResponse = await GetBoardMembersAsyncWithHttpInfo(boardId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all board members Retrieves a pageable list of members for a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (BoardMembersPagedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardMembersPagedResponse>> GetBoardMembersAsyncWithHttpInfo (string boardId, string limit = null, string offset = null)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->GetBoardMembers");

            var localVarPath = "/v2/boards/{board_id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBoardMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardMembersPagedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardMembersPagedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardMembersPagedResponse)));
        }

        /// <summary>
        /// Get specific board member Retrieves information for a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to retrieve.</param>
        /// <returns>BoardMemberWithLinks</returns>
        public BoardMemberWithLinks GetSpecificBoardMember (string boardId, string boardMemberId)
        {
             ApiResponse<BoardMemberWithLinks> localVarResponse = GetSpecificBoardMemberWithHttpInfo(boardId, boardMemberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific board member Retrieves information for a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to retrieve.</param>
        /// <returns>ApiResponse of BoardMemberWithLinks</returns>
        public ApiResponse< BoardMemberWithLinks > GetSpecificBoardMemberWithHttpInfo (string boardId, string boardMemberId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->GetSpecificBoardMember");
            // verify the required parameter 'boardMemberId' is set
            if (boardMemberId == null)
                throw new ApiException(400, "Missing required parameter 'boardMemberId' when calling BoardMembersApi->GetSpecificBoardMember");

            var localVarPath = "/v2/boards/{board_id}/members/{board_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardMemberId != null) localVarPathParams.Add("board_member_id", this.Configuration.ApiClient.ParameterToString(boardMemberId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificBoardMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardMemberWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardMemberWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardMemberWithLinks)));
        }

        /// <summary>
        /// Get specific board member Retrieves information for a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to retrieve.</param>
        /// <returns>Task of BoardMemberWithLinks</returns>
        public async System.Threading.Tasks.Task<BoardMemberWithLinks> GetSpecificBoardMemberAsync (string boardId, string boardMemberId)
        {
             ApiResponse<BoardMemberWithLinks> localVarResponse = await GetSpecificBoardMemberAsyncWithHttpInfo(boardId, boardMemberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specific board member Retrieves information for a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to retrieve.</param>
        /// <returns>Task of ApiResponse (BoardMemberWithLinks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardMemberWithLinks>> GetSpecificBoardMemberAsyncWithHttpInfo (string boardId, string boardMemberId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->GetSpecificBoardMember");
            // verify the required parameter 'boardMemberId' is set
            if (boardMemberId == null)
                throw new ApiException(400, "Missing required parameter 'boardMemberId' when calling BoardMembersApi->GetSpecificBoardMember");

            var localVarPath = "/v2/boards/{board_id}/members/{board_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardMemberId != null) localVarPathParams.Add("board_member_id", this.Configuration.ApiClient.ParameterToString(boardMemberId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificBoardMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardMemberWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardMemberWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardMemberWithLinks)));
        }

        /// <summary>
        /// Remove board member Removes a board member from a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete an item.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to delete.</param>
        /// <returns>Object</returns>
        public Object RemoveBoardMember (string boardId, string boardMemberId)
        {
             ApiResponse<Object> localVarResponse = RemoveBoardMemberWithHttpInfo(boardId, boardMemberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove board member Removes a board member from a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete an item.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RemoveBoardMemberWithHttpInfo (string boardId, string boardMemberId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->RemoveBoardMember");
            // verify the required parameter 'boardMemberId' is set
            if (boardMemberId == null)
                throw new ApiException(400, "Missing required parameter 'boardMemberId' when calling BoardMembersApi->RemoveBoardMember");

            var localVarPath = "/v2/boards/{board_id}/members/{board_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardMemberId != null) localVarPathParams.Add("board_member_id", this.Configuration.ApiClient.ParameterToString(boardMemberId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveBoardMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove board member Removes a board member from a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete an item.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to delete.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveBoardMemberAsync (string boardId, string boardMemberId)
        {
             ApiResponse<Object> localVarResponse = await RemoveBoardMemberAsyncWithHttpInfo(boardId, boardMemberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove board member Removes a board member from a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete an item.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveBoardMemberAsyncWithHttpInfo (string boardId, string boardMemberId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->RemoveBoardMember");
            // verify the required parameter 'boardMemberId' is set
            if (boardMemberId == null)
                throw new ApiException(400, "Missing required parameter 'boardMemberId' when calling BoardMembersApi->RemoveBoardMember");

            var localVarPath = "/v2/boards/{board_id}/members/{board_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardMemberId != null) localVarPathParams.Add("board_member_id", this.Configuration.ApiClient.ParameterToString(boardMemberId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveBoardMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Share board Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board&#x27;s Sharing policy, there might be various scenarios where membership in the team is required in order to share the board with a user.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <returns>InvitationResult</returns>
        public InvitationResult ShareBoard (BoardMembersInvite body, string boardId)
        {
             ApiResponse<InvitationResult> localVarResponse = ShareBoardWithHttpInfo(body, boardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share board Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board&#x27;s Sharing policy, there might be various scenarios where membership in the team is required in order to share the board with a user.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <returns>ApiResponse of InvitationResult</returns>
        public ApiResponse< InvitationResult > ShareBoardWithHttpInfo (BoardMembersInvite body, string boardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BoardMembersApi->ShareBoard");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->ShareBoard");

            var localVarPath = "/v2/boards/{board_id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InvitationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationResult)));
        }

        /// <summary>
        /// Share board Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board&#x27;s Sharing policy, there might be various scenarios where membership in the team is required in order to share the board with a user.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <returns>Task of InvitationResult</returns>
        public async System.Threading.Tasks.Task<InvitationResult> ShareBoardAsync (BoardMembersInvite body, string boardId)
        {
             ApiResponse<InvitationResult> localVarResponse = await ShareBoardAsyncWithHttpInfo(body, boardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share board Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board&#x27;s Sharing policy, there might be various scenarios where membership in the team is required in order to share the board with a user.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board to which the board member belongs.</param>
        /// <returns>Task of ApiResponse (InvitationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationResult>> ShareBoardAsyncWithHttpInfo (BoardMembersInvite body, string boardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BoardMembersApi->ShareBoard");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->ShareBoard");

            var localVarPath = "/v2/boards/{board_id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InvitationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationResult)));
        }

        /// <summary>
        /// Update board member Updates the role of a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the role of the board member.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to update.</param>
        /// <returns>BoardMemberWithLinks</returns>
        public BoardMemberWithLinks UpdateBoardMember (BoardMemberChanges body, string boardId, string boardMemberId)
        {
             ApiResponse<BoardMemberWithLinks> localVarResponse = UpdateBoardMemberWithHttpInfo(body, boardId, boardMemberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update board member Updates the role of a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the role of the board member.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to update.</param>
        /// <returns>ApiResponse of BoardMemberWithLinks</returns>
        public ApiResponse< BoardMemberWithLinks > UpdateBoardMemberWithHttpInfo (BoardMemberChanges body, string boardId, string boardMemberId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BoardMembersApi->UpdateBoardMember");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->UpdateBoardMember");
            // verify the required parameter 'boardMemberId' is set
            if (boardMemberId == null)
                throw new ApiException(400, "Missing required parameter 'boardMemberId' when calling BoardMembersApi->UpdateBoardMember");

            var localVarPath = "/v2/boards/{board_id}/members/{board_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardMemberId != null) localVarPathParams.Add("board_member_id", this.Configuration.ApiClient.ParameterToString(boardMemberId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBoardMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardMemberWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardMemberWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardMemberWithLinks)));
        }

        /// <summary>
        /// Update board member Updates the role of a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the role of the board member.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to update.</param>
        /// <returns>Task of BoardMemberWithLinks</returns>
        public async System.Threading.Tasks.Task<BoardMemberWithLinks> UpdateBoardMemberAsync (BoardMemberChanges body, string boardId, string boardMemberId)
        {
             ApiResponse<BoardMemberWithLinks> localVarResponse = await UpdateBoardMemberAsyncWithHttpInfo(body, boardId, boardMemberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update board member Updates the role of a board member.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the role of the board member.</param>
        /// <param name="boardMemberId">Unique identifier (ID) of the board member whose role you want to update.</param>
        /// <returns>Task of ApiResponse (BoardMemberWithLinks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardMemberWithLinks>> UpdateBoardMemberAsyncWithHttpInfo (BoardMemberChanges body, string boardId, string boardMemberId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BoardMembersApi->UpdateBoardMember");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardMembersApi->UpdateBoardMember");
            // verify the required parameter 'boardMemberId' is set
            if (boardMemberId == null)
                throw new ApiException(400, "Missing required parameter 'boardMemberId' when calling BoardMembersApi->UpdateBoardMember");

            var localVarPath = "/v2/boards/{board_id}/members/{board_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardMemberId != null) localVarPathParams.Add("board_member_id", this.Configuration.ApiClient.ParameterToString(boardMemberId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBoardMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardMemberWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardMemberWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardMemberWithLinks)));
        }

    }
}
