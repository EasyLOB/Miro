/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IConnectorsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create connector
        /// </summary>
        /// <remarks>
        /// Adds a connector to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to create the connector.</param>
        /// <returns>ConnectorWithLinks</returns>
        ConnectorWithLinks CreateConnector (ConnectorCreationData body, string boardId);

        /// <summary>
        /// Create connector
        /// </summary>
        /// <remarks>
        /// Adds a connector to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to create the connector.</param>
        /// <returns>ApiResponse of ConnectorWithLinks</returns>
        ApiResponse<ConnectorWithLinks> CreateConnectorWithHttpInfo (ConnectorCreationData body, string boardId);
        /// <summary>
        /// Delete connector
        /// </summary>
        /// <remarks>
        /// Deletes the specified connector from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to delete.</param>
        /// <returns>Object</returns>
        Object DeleteConnector (string boardId, string connectorId);

        /// <summary>
        /// Delete connector
        /// </summary>
        /// <remarks>
        /// Deletes the specified connector from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteConnectorWithHttpInfo (string boardId, string connectorId);
        /// <summary>
        /// Get specific connector
        /// </summary>
        /// <remarks>
        /// Retrieves information for a specific connector on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to retrieve.</param>
        /// <returns>ConnectorWithLinks</returns>
        ConnectorWithLinks GetConnector (string boardId, string connectorId);

        /// <summary>
        /// Get specific connector
        /// </summary>
        /// <remarks>
        /// Retrieves information for a specific connector on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to retrieve.</param>
        /// <returns>ApiResponse of ConnectorWithLinks</returns>
        ApiResponse<ConnectorWithLinks> GetConnectorWithHttpInfo (string boardId, string connectorId);
        /// <summary>
        /// Get connectors
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the &#x60;cursor&#x60; parameter equal to the &#x60;cursor&#x60; value you received in the response of the previous request. For example, if you set the &#x60;limit&#x60; query parameter to &#x60;10&#x60; and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let&#x27;s say the cursor parameter value returned in the response is &#x60;foo&#x60;. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to &#x60;foo&#x60;.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a list of connectors.</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ConnectorsCursorPaged</returns>
        ConnectorsCursorPaged GetConnectors (string boardId, string limit = null, string cursor = null);

        /// <summary>
        /// Get connectors
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the &#x60;cursor&#x60; parameter equal to the &#x60;cursor&#x60; value you received in the response of the previous request. For example, if you set the &#x60;limit&#x60; query parameter to &#x60;10&#x60; and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let&#x27;s say the cursor parameter value returned in the response is &#x60;foo&#x60;. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to &#x60;foo&#x60;.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a list of connectors.</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ConnectorsCursorPaged</returns>
        ApiResponse<ConnectorsCursorPaged> GetConnectorsWithHttpInfo (string boardId, string limit = null, string cursor = null);
        /// <summary>
        /// Update connector
        /// </summary>
        /// <remarks>
        /// Updates a connector on a board based on the data and style properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to update.</param>
        /// <returns>ConnectorWithLinks</returns>
        ConnectorWithLinks UpdateConnector (ConnectorChangesData body, string boardId, string connectorId);

        /// <summary>
        /// Update connector
        /// </summary>
        /// <remarks>
        /// Updates a connector on a board based on the data and style properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to update.</param>
        /// <returns>ApiResponse of ConnectorWithLinks</returns>
        ApiResponse<ConnectorWithLinks> UpdateConnectorWithHttpInfo (ConnectorChangesData body, string boardId, string connectorId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create connector
        /// </summary>
        /// <remarks>
        /// Adds a connector to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to create the connector.</param>
        /// <returns>Task of ConnectorWithLinks</returns>
        System.Threading.Tasks.Task<ConnectorWithLinks> CreateConnectorAsync (ConnectorCreationData body, string boardId);

        /// <summary>
        /// Create connector
        /// </summary>
        /// <remarks>
        /// Adds a connector to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to create the connector.</param>
        /// <returns>Task of ApiResponse (ConnectorWithLinks)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorWithLinks>> CreateConnectorAsyncWithHttpInfo (ConnectorCreationData body, string boardId);
        /// <summary>
        /// Delete connector
        /// </summary>
        /// <remarks>
        /// Deletes the specified connector from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to delete.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteConnectorAsync (string boardId, string connectorId);

        /// <summary>
        /// Delete connector
        /// </summary>
        /// <remarks>
        /// Deletes the specified connector from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorAsyncWithHttpInfo (string boardId, string connectorId);
        /// <summary>
        /// Get specific connector
        /// </summary>
        /// <remarks>
        /// Retrieves information for a specific connector on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to retrieve.</param>
        /// <returns>Task of ConnectorWithLinks</returns>
        System.Threading.Tasks.Task<ConnectorWithLinks> GetConnectorAsync (string boardId, string connectorId);

        /// <summary>
        /// Get specific connector
        /// </summary>
        /// <remarks>
        /// Retrieves information for a specific connector on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to retrieve.</param>
        /// <returns>Task of ApiResponse (ConnectorWithLinks)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorWithLinks>> GetConnectorAsyncWithHttpInfo (string boardId, string connectorId);
        /// <summary>
        /// Get connectors
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the &#x60;cursor&#x60; parameter equal to the &#x60;cursor&#x60; value you received in the response of the previous request. For example, if you set the &#x60;limit&#x60; query parameter to &#x60;10&#x60; and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let&#x27;s say the cursor parameter value returned in the response is &#x60;foo&#x60;. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to &#x60;foo&#x60;.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a list of connectors.</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>Task of ConnectorsCursorPaged</returns>
        System.Threading.Tasks.Task<ConnectorsCursorPaged> GetConnectorsAsync (string boardId, string limit = null, string cursor = null);

        /// <summary>
        /// Get connectors
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the &#x60;cursor&#x60; parameter equal to the &#x60;cursor&#x60; value you received in the response of the previous request. For example, if you set the &#x60;limit&#x60; query parameter to &#x60;10&#x60; and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let&#x27;s say the cursor parameter value returned in the response is &#x60;foo&#x60;. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to &#x60;foo&#x60;.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a list of connectors.</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectorsCursorPaged)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorsCursorPaged>> GetConnectorsAsyncWithHttpInfo (string boardId, string limit = null, string cursor = null);
        /// <summary>
        /// Update connector
        /// </summary>
        /// <remarks>
        /// Updates a connector on a board based on the data and style properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to update.</param>
        /// <returns>Task of ConnectorWithLinks</returns>
        System.Threading.Tasks.Task<ConnectorWithLinks> UpdateConnectorAsync (ConnectorChangesData body, string boardId, string connectorId);

        /// <summary>
        /// Update connector
        /// </summary>
        /// <remarks>
        /// Updates a connector on a board based on the data and style properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to update.</param>
        /// <returns>Task of ApiResponse (ConnectorWithLinks)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorWithLinks>> UpdateConnectorAsyncWithHttpInfo (ConnectorChangesData body, string boardId, string connectorId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ConnectorsApi : IConnectorsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectorsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ConnectorsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConnectorsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create connector Adds a connector to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to create the connector.</param>
        /// <returns>ConnectorWithLinks</returns>
        public ConnectorWithLinks CreateConnector (ConnectorCreationData body, string boardId)
        {
             ApiResponse<ConnectorWithLinks> localVarResponse = CreateConnectorWithHttpInfo(body, boardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create connector Adds a connector to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to create the connector.</param>
        /// <returns>ApiResponse of ConnectorWithLinks</returns>
        public ApiResponse< ConnectorWithLinks > CreateConnectorWithHttpInfo (ConnectorCreationData body, string boardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConnectorsApi->CreateConnector");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->CreateConnector");

            var localVarPath = "/v2/boards/{board_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectorWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorWithLinks)));
        }

        /// <summary>
        /// Create connector Adds a connector to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to create the connector.</param>
        /// <returns>Task of ConnectorWithLinks</returns>
        public async System.Threading.Tasks.Task<ConnectorWithLinks> CreateConnectorAsync (ConnectorCreationData body, string boardId)
        {
             ApiResponse<ConnectorWithLinks> localVarResponse = await CreateConnectorAsyncWithHttpInfo(body, boardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create connector Adds a connector to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to create the connector.</param>
        /// <returns>Task of ApiResponse (ConnectorWithLinks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorWithLinks>> CreateConnectorAsyncWithHttpInfo (ConnectorCreationData body, string boardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConnectorsApi->CreateConnector");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->CreateConnector");

            var localVarPath = "/v2/boards/{board_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectorWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorWithLinks)));
        }

        /// <summary>
        /// Delete connector Deletes the specified connector from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to delete.</param>
        /// <returns>Object</returns>
        public Object DeleteConnector (string boardId, string connectorId)
        {
             ApiResponse<Object> localVarResponse = DeleteConnectorWithHttpInfo(boardId, connectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete connector Deletes the specified connector from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteConnectorWithHttpInfo (string boardId, string connectorId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->DeleteConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ConnectorsApi->DeleteConnector");

            var localVarPath = "/v2/boards/{board_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete connector Deletes the specified connector from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to delete.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteConnectorAsync (string boardId, string connectorId)
        {
             ApiResponse<Object> localVarResponse = await DeleteConnectorAsyncWithHttpInfo(boardId, connectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete connector Deletes the specified connector from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorAsyncWithHttpInfo (string boardId, string connectorId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->DeleteConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ConnectorsApi->DeleteConnector");

            var localVarPath = "/v2/boards/{board_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get specific connector Retrieves information for a specific connector on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to retrieve.</param>
        /// <returns>ConnectorWithLinks</returns>
        public ConnectorWithLinks GetConnector (string boardId, string connectorId)
        {
             ApiResponse<ConnectorWithLinks> localVarResponse = GetConnectorWithHttpInfo(boardId, connectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific connector Retrieves information for a specific connector on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to retrieve.</param>
        /// <returns>ApiResponse of ConnectorWithLinks</returns>
        public ApiResponse< ConnectorWithLinks > GetConnectorWithHttpInfo (string boardId, string connectorId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->GetConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ConnectorsApi->GetConnector");

            var localVarPath = "/v2/boards/{board_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectorWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorWithLinks)));
        }

        /// <summary>
        /// Get specific connector Retrieves information for a specific connector on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to retrieve.</param>
        /// <returns>Task of ConnectorWithLinks</returns>
        public async System.Threading.Tasks.Task<ConnectorWithLinks> GetConnectorAsync (string boardId, string connectorId)
        {
             ApiResponse<ConnectorWithLinks> localVarResponse = await GetConnectorAsyncWithHttpInfo(boardId, connectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specific connector Retrieves information for a specific connector on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to retrieve.</param>
        /// <returns>Task of ApiResponse (ConnectorWithLinks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorWithLinks>> GetConnectorAsyncWithHttpInfo (string boardId, string connectorId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->GetConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ConnectorsApi->GetConnector");

            var localVarPath = "/v2/boards/{board_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectorWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorWithLinks)));
        }

        /// <summary>
        /// Get connectors Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the &#x60;cursor&#x60; parameter equal to the &#x60;cursor&#x60; value you received in the response of the previous request. For example, if you set the &#x60;limit&#x60; query parameter to &#x60;10&#x60; and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let&#x27;s say the cursor parameter value returned in the response is &#x60;foo&#x60;. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to &#x60;foo&#x60;.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a list of connectors.</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ConnectorsCursorPaged</returns>
        public ConnectorsCursorPaged GetConnectors (string boardId, string limit = null, string cursor = null)
        {
             ApiResponse<ConnectorsCursorPaged> localVarResponse = GetConnectorsWithHttpInfo(boardId, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get connectors Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the &#x60;cursor&#x60; parameter equal to the &#x60;cursor&#x60; value you received in the response of the previous request. For example, if you set the &#x60;limit&#x60; query parameter to &#x60;10&#x60; and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let&#x27;s say the cursor parameter value returned in the response is &#x60;foo&#x60;. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to &#x60;foo&#x60;.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a list of connectors.</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ConnectorsCursorPaged</returns>
        public ApiResponse< ConnectorsCursorPaged > GetConnectorsWithHttpInfo (string boardId, string limit = null, string cursor = null)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->GetConnectors");

            var localVarPath = "/v2/boards/{board_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorsCursorPaged>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectorsCursorPaged) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorsCursorPaged)));
        }

        /// <summary>
        /// Get connectors Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the &#x60;cursor&#x60; parameter equal to the &#x60;cursor&#x60; value you received in the response of the previous request. For example, if you set the &#x60;limit&#x60; query parameter to &#x60;10&#x60; and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let&#x27;s say the cursor parameter value returned in the response is &#x60;foo&#x60;. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to &#x60;foo&#x60;.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a list of connectors.</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>Task of ConnectorsCursorPaged</returns>
        public async System.Threading.Tasks.Task<ConnectorsCursorPaged> GetConnectorsAsync (string boardId, string limit = null, string cursor = null)
        {
             ApiResponse<ConnectorsCursorPaged> localVarResponse = await GetConnectorsAsyncWithHttpInfo(boardId, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get connectors Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the &#x60;cursor&#x60; parameter equal to the &#x60;cursor&#x60; value you received in the response of the previous request. For example, if you set the &#x60;limit&#x60; query parameter to &#x60;10&#x60; and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let&#x27;s say the cursor parameter value returned in the response is &#x60;foo&#x60;. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to &#x60;foo&#x60;.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a list of connectors.</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectorsCursorPaged)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorsCursorPaged>> GetConnectorsAsyncWithHttpInfo (string boardId, string limit = null, string cursor = null)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->GetConnectors");

            var localVarPath = "/v2/boards/{board_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorsCursorPaged>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectorsCursorPaged) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorsCursorPaged)));
        }

        /// <summary>
        /// Update connector Updates a connector on a board based on the data and style properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to update.</param>
        /// <returns>ConnectorWithLinks</returns>
        public ConnectorWithLinks UpdateConnector (ConnectorChangesData body, string boardId, string connectorId)
        {
             ApiResponse<ConnectorWithLinks> localVarResponse = UpdateConnectorWithHttpInfo(body, boardId, connectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update connector Updates a connector on a board based on the data and style properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to update.</param>
        /// <returns>ApiResponse of ConnectorWithLinks</returns>
        public ApiResponse< ConnectorWithLinks > UpdateConnectorWithHttpInfo (ConnectorChangesData body, string boardId, string connectorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConnectorsApi->UpdateConnector");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->UpdateConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ConnectorsApi->UpdateConnector");

            var localVarPath = "/v2/boards/{board_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectorWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorWithLinks)));
        }

        /// <summary>
        /// Update connector Updates a connector on a board based on the data and style properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to update.</param>
        /// <returns>Task of ConnectorWithLinks</returns>
        public async System.Threading.Tasks.Task<ConnectorWithLinks> UpdateConnectorAsync (ConnectorChangesData body, string boardId, string connectorId)
        {
             ApiResponse<ConnectorWithLinks> localVarResponse = await UpdateConnectorAsyncWithHttpInfo(body, boardId, connectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update connector Updates a connector on a board based on the data and style properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board for which you want to update the connector.</param>
        /// <param name="connectorId">Unique identifier (ID) of the connector that you want to update.</param>
        /// <returns>Task of ApiResponse (ConnectorWithLinks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorWithLinks>> UpdateConnectorAsyncWithHttpInfo (ConnectorChangesData body, string boardId, string connectorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConnectorsApi->UpdateConnector");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling ConnectorsApi->UpdateConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ConnectorsApi->UpdateConnector");

            var localVarPath = "/v2/boards/{board_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectorWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorWithLinks)));
        }

    }
}
