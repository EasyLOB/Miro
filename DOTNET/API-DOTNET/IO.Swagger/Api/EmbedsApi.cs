/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IEmbedsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create embed item
        /// </summary>
        /// <remarks>
        /// Adds an embed item containing external content to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to create the item.</param>
        /// <returns>EmbedItem</returns>
        EmbedItem CreateEmbedItem (EmbedCreateRequest body, string boardId);

        /// <summary>
        /// Create embed item
        /// </summary>
        /// <remarks>
        /// Adds an embed item containing external content to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to create the item.</param>
        /// <returns>ApiResponse of EmbedItem</returns>
        ApiResponse<EmbedItem> CreateEmbedItemWithHttpInfo (EmbedCreateRequest body, string boardId);
        /// <summary>
        /// Delete embed item
        /// </summary>
        /// <remarks>
        /// Deletes an embed item from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to delete.</param>
        /// <returns>Object</returns>
        Object DeleteEmbedItem (string boardId, string itemId);

        /// <summary>
        /// Delete embed item
        /// </summary>
        /// <remarks>
        /// Deletes an embed item from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteEmbedItemWithHttpInfo (string boardId, string itemId);
        /// <summary>
        /// Get embed item
        /// </summary>
        /// <remarks>
        /// Retrieves information for a specific embed item on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to retrieve.</param>
        /// <returns>EmbedItem</returns>
        EmbedItem GetEmbedItem (string boardId, string itemId);

        /// <summary>
        /// Get embed item
        /// </summary>
        /// <remarks>
        /// Retrieves information for a specific embed item on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to retrieve.</param>
        /// <returns>ApiResponse of EmbedItem</returns>
        ApiResponse<EmbedItem> GetEmbedItemWithHttpInfo (string boardId, string itemId);
        /// <summary>
        /// Update embed item
        /// </summary>
        /// <remarks>
        /// Updates an embed item on a board based on the data properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to update the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to update.</param>
        /// <returns>EmbedItem</returns>
        EmbedItem UpdateEmbedItem (EmbedUpdateRequest body, string boardId, string itemId);

        /// <summary>
        /// Update embed item
        /// </summary>
        /// <remarks>
        /// Updates an embed item on a board based on the data properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to update the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to update.</param>
        /// <returns>ApiResponse of EmbedItem</returns>
        ApiResponse<EmbedItem> UpdateEmbedItemWithHttpInfo (EmbedUpdateRequest body, string boardId, string itemId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create embed item
        /// </summary>
        /// <remarks>
        /// Adds an embed item containing external content to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to create the item.</param>
        /// <returns>Task of EmbedItem</returns>
        System.Threading.Tasks.Task<EmbedItem> CreateEmbedItemAsync (EmbedCreateRequest body, string boardId);

        /// <summary>
        /// Create embed item
        /// </summary>
        /// <remarks>
        /// Adds an embed item containing external content to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to create the item.</param>
        /// <returns>Task of ApiResponse (EmbedItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmbedItem>> CreateEmbedItemAsyncWithHttpInfo (EmbedCreateRequest body, string boardId);
        /// <summary>
        /// Delete embed item
        /// </summary>
        /// <remarks>
        /// Deletes an embed item from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to delete.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteEmbedItemAsync (string boardId, string itemId);

        /// <summary>
        /// Delete embed item
        /// </summary>
        /// <remarks>
        /// Deletes an embed item from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmbedItemAsyncWithHttpInfo (string boardId, string itemId);
        /// <summary>
        /// Get embed item
        /// </summary>
        /// <remarks>
        /// Retrieves information for a specific embed item on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to retrieve.</param>
        /// <returns>Task of EmbedItem</returns>
        System.Threading.Tasks.Task<EmbedItem> GetEmbedItemAsync (string boardId, string itemId);

        /// <summary>
        /// Get embed item
        /// </summary>
        /// <remarks>
        /// Retrieves information for a specific embed item on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to retrieve.</param>
        /// <returns>Task of ApiResponse (EmbedItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmbedItem>> GetEmbedItemAsyncWithHttpInfo (string boardId, string itemId);
        /// <summary>
        /// Update embed item
        /// </summary>
        /// <remarks>
        /// Updates an embed item on a board based on the data properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to update the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to update.</param>
        /// <returns>Task of EmbedItem</returns>
        System.Threading.Tasks.Task<EmbedItem> UpdateEmbedItemAsync (EmbedUpdateRequest body, string boardId, string itemId);

        /// <summary>
        /// Update embed item
        /// </summary>
        /// <remarks>
        /// Updates an embed item on a board based on the data properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to update the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to update.</param>
        /// <returns>Task of ApiResponse (EmbedItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmbedItem>> UpdateEmbedItemAsyncWithHttpInfo (EmbedUpdateRequest body, string boardId, string itemId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class EmbedsApi : IEmbedsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmbedsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedsApi"/> class
        /// </summary>
        /// <returns></returns>
        public EmbedsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmbedsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create embed item Adds an embed item containing external content to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to create the item.</param>
        /// <returns>EmbedItem</returns>
        public EmbedItem CreateEmbedItem (EmbedCreateRequest body, string boardId)
        {
             ApiResponse<EmbedItem> localVarResponse = CreateEmbedItemWithHttpInfo(body, boardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create embed item Adds an embed item containing external content to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to create the item.</param>
        /// <returns>ApiResponse of EmbedItem</returns>
        public ApiResponse< EmbedItem > CreateEmbedItemWithHttpInfo (EmbedCreateRequest body, string boardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmbedsApi->CreateEmbedItem");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling EmbedsApi->CreateEmbedItem");

            var localVarPath = "/v2/boards/{board_id}/embeds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmbedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmbedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbedItem)));
        }

        /// <summary>
        /// Create embed item Adds an embed item containing external content to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to create the item.</param>
        /// <returns>Task of EmbedItem</returns>
        public async System.Threading.Tasks.Task<EmbedItem> CreateEmbedItemAsync (EmbedCreateRequest body, string boardId)
        {
             ApiResponse<EmbedItem> localVarResponse = await CreateEmbedItemAsyncWithHttpInfo(body, boardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create embed item Adds an embed item containing external content to a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to create the item.</param>
        /// <returns>Task of ApiResponse (EmbedItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmbedItem>> CreateEmbedItemAsyncWithHttpInfo (EmbedCreateRequest body, string boardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmbedsApi->CreateEmbedItem");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling EmbedsApi->CreateEmbedItem");

            var localVarPath = "/v2/boards/{board_id}/embeds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmbedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmbedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbedItem)));
        }

        /// <summary>
        /// Delete embed item Deletes an embed item from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to delete.</param>
        /// <returns>Object</returns>
        public Object DeleteEmbedItem (string boardId, string itemId)
        {
             ApiResponse<Object> localVarResponse = DeleteEmbedItemWithHttpInfo(boardId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete embed item Deletes an embed item from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteEmbedItemWithHttpInfo (string boardId, string itemId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling EmbedsApi->DeleteEmbedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling EmbedsApi->DeleteEmbedItem");

            var localVarPath = "/v2/boards/{board_id}/embeds/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmbedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete embed item Deletes an embed item from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to delete.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteEmbedItemAsync (string boardId, string itemId)
        {
             ApiResponse<Object> localVarResponse = await DeleteEmbedItemAsyncWithHttpInfo(boardId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete embed item Deletes an embed item from the board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to delete the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmbedItemAsyncWithHttpInfo (string boardId, string itemId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling EmbedsApi->DeleteEmbedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling EmbedsApi->DeleteEmbedItem");

            var localVarPath = "/v2/boards/{board_id}/embeds/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmbedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get embed item Retrieves information for a specific embed item on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to retrieve.</param>
        /// <returns>EmbedItem</returns>
        public EmbedItem GetEmbedItem (string boardId, string itemId)
        {
             ApiResponse<EmbedItem> localVarResponse = GetEmbedItemWithHttpInfo(boardId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get embed item Retrieves information for a specific embed item on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to retrieve.</param>
        /// <returns>ApiResponse of EmbedItem</returns>
        public ApiResponse< EmbedItem > GetEmbedItemWithHttpInfo (string boardId, string itemId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling EmbedsApi->GetEmbedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling EmbedsApi->GetEmbedItem");

            var localVarPath = "/v2/boards/{board_id}/embeds/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmbedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmbedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbedItem)));
        }

        /// <summary>
        /// Get embed item Retrieves information for a specific embed item on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to retrieve.</param>
        /// <returns>Task of EmbedItem</returns>
        public async System.Threading.Tasks.Task<EmbedItem> GetEmbedItemAsync (string boardId, string itemId)
        {
             ApiResponse<EmbedItem> localVarResponse = await GetEmbedItemAsyncWithHttpInfo(boardId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get embed item Retrieves information for a specific embed item on a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board from which you want to retrieve a specific item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to retrieve.</param>
        /// <returns>Task of ApiResponse (EmbedItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmbedItem>> GetEmbedItemAsyncWithHttpInfo (string boardId, string itemId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling EmbedsApi->GetEmbedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling EmbedsApi->GetEmbedItem");

            var localVarPath = "/v2/boards/{board_id}/embeds/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmbedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmbedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbedItem)));
        }

        /// <summary>
        /// Update embed item Updates an embed item on a board based on the data properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to update the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to update.</param>
        /// <returns>EmbedItem</returns>
        public EmbedItem UpdateEmbedItem (EmbedUpdateRequest body, string boardId, string itemId)
        {
             ApiResponse<EmbedItem> localVarResponse = UpdateEmbedItemWithHttpInfo(body, boardId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update embed item Updates an embed item on a board based on the data properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to update the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to update.</param>
        /// <returns>ApiResponse of EmbedItem</returns>
        public ApiResponse< EmbedItem > UpdateEmbedItemWithHttpInfo (EmbedUpdateRequest body, string boardId, string itemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmbedsApi->UpdateEmbedItem");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling EmbedsApi->UpdateEmbedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling EmbedsApi->UpdateEmbedItem");

            var localVarPath = "/v2/boards/{board_id}/embeds/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmbedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmbedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbedItem)));
        }

        /// <summary>
        /// Update embed item Updates an embed item on a board based on the data properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to update the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to update.</param>
        /// <returns>Task of EmbedItem</returns>
        public async System.Threading.Tasks.Task<EmbedItem> UpdateEmbedItemAsync (EmbedUpdateRequest body, string boardId, string itemId)
        {
             ApiResponse<EmbedItem> localVarResponse = await UpdateEmbedItemAsyncWithHttpInfo(body, boardId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update embed item Updates an embed item on a board based on the data properties provided in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board where you want to update the item.</param>
        /// <param name="itemId">Unique identifier (ID) of the item that you want to update.</param>
        /// <returns>Task of ApiResponse (EmbedItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmbedItem>> UpdateEmbedItemAsyncWithHttpInfo (EmbedUpdateRequest body, string boardId, string itemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmbedsApi->UpdateEmbedItem");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling EmbedsApi->UpdateEmbedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling EmbedsApi->UpdateEmbedItem");

            var localVarPath = "/v2/boards/{board_id}/embeds/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmbedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmbedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbedItem)));
        }

    }
}
