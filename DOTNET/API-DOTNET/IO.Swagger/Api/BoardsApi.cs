/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBoardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Copy board
        /// </summary>
        /// <remarks>
        /// Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 4&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFrom">Unique identifier (ID) of the board that you want to copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BoardWithLinks</returns>
        BoardWithLinks CopyBoard (string copyFrom, BoardChanges body = null);

        /// <summary>
        /// Copy board
        /// </summary>
        /// <remarks>
        /// Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 4&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFrom">Unique identifier (ID) of the board that you want to copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BoardWithLinks</returns>
        ApiResponse<BoardWithLinks> CopyBoardWithHttpInfo (string copyFrom, BoardChanges body = null);
        /// <summary>
        /// Create board
        /// </summary>
        /// <remarks>
        /// Creates a board with the specified name and sharing policies.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BoardWithLinks</returns>
        BoardWithLinks CreateBoard (BoardChanges body = null);

        /// <summary>
        /// Create board
        /// </summary>
        /// <remarks>
        /// Creates a board with the specified name and sharing policies.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BoardWithLinks</returns>
        ApiResponse<BoardWithLinks> CreateBoardWithHttpInfo (BoardChanges body = null);
        /// <summary>
        /// Delete board
        /// </summary>
        /// <remarks>
        /// Deletes a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to delete.</param>
        /// <returns>Object</returns>
        Object DeleteBoard (string boardId);

        /// <summary>
        /// Delete board
        /// </summary>
        /// <remarks>
        /// Deletes a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteBoardWithHttpInfo (string boardId);
        /// <summary>
        /// Get boards
        /// </summary>
        /// <remarks>
        /// Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven&#x27;t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins). Note that you only get results instantaneously when you filter by the &#x60;team_id&#x60;, &#x60;project_id&#x60;, or both the &#x60;team_id&#x60; and &#x60;project_id&#x60;. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"> (optional)</param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="owner"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional, default to default)</param>
        /// <returns>BoardsPagedResponse</returns>
        BoardsPagedResponse GetBoards (string teamId = null, string projectId = null, string query = null, string owner = null, string limit = null, string offset = null, string sort = null);

        /// <summary>
        /// Get boards
        /// </summary>
        /// <remarks>
        /// Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven&#x27;t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins). Note that you only get results instantaneously when you filter by the &#x60;team_id&#x60;, &#x60;project_id&#x60;, or both the &#x60;team_id&#x60; and &#x60;project_id&#x60;. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"> (optional)</param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="owner"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional, default to default)</param>
        /// <returns>ApiResponse of BoardsPagedResponse</returns>
        ApiResponse<BoardsPagedResponse> GetBoardsWithHttpInfo (string teamId = null, string projectId = null, string query = null, string owner = null, string limit = null, string offset = null, string sort = null);
        /// <summary>
        /// Get specific board
        /// </summary>
        /// <remarks>
        /// Retrieves information about a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to retrieve.</param>
        /// <returns>BoardWithLinks</returns>
        BoardWithLinks GetSpecificBoard (string boardId);

        /// <summary>
        /// Get specific board
        /// </summary>
        /// <remarks>
        /// Retrieves information about a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to retrieve.</param>
        /// <returns>ApiResponse of BoardWithLinks</returns>
        ApiResponse<BoardWithLinks> GetSpecificBoardWithHttpInfo (string boardId);
        /// <summary>
        /// Update board
        /// </summary>
        /// <remarks>
        /// Updates a specific board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to update.</param>
        /// <returns>BoardWithLinks</returns>
        BoardWithLinks UpdateBoard (BoardChanges body, string boardId);

        /// <summary>
        /// Update board
        /// </summary>
        /// <remarks>
        /// Updates a specific board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to update.</param>
        /// <returns>ApiResponse of BoardWithLinks</returns>
        ApiResponse<BoardWithLinks> UpdateBoardWithHttpInfo (BoardChanges body, string boardId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Copy board
        /// </summary>
        /// <remarks>
        /// Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 4&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFrom">Unique identifier (ID) of the board that you want to copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BoardWithLinks</returns>
        System.Threading.Tasks.Task<BoardWithLinks> CopyBoardAsync (string copyFrom, BoardChanges body = null);

        /// <summary>
        /// Copy board
        /// </summary>
        /// <remarks>
        /// Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 4&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFrom">Unique identifier (ID) of the board that you want to copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BoardWithLinks)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardWithLinks>> CopyBoardAsyncWithHttpInfo (string copyFrom, BoardChanges body = null);
        /// <summary>
        /// Create board
        /// </summary>
        /// <remarks>
        /// Creates a board with the specified name and sharing policies.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BoardWithLinks</returns>
        System.Threading.Tasks.Task<BoardWithLinks> CreateBoardAsync (BoardChanges body = null);

        /// <summary>
        /// Create board
        /// </summary>
        /// <remarks>
        /// Creates a board with the specified name and sharing policies.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BoardWithLinks)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardWithLinks>> CreateBoardAsyncWithHttpInfo (BoardChanges body = null);
        /// <summary>
        /// Delete board
        /// </summary>
        /// <remarks>
        /// Deletes a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to delete.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteBoardAsync (string boardId);

        /// <summary>
        /// Delete board
        /// </summary>
        /// <remarks>
        /// Deletes a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBoardAsyncWithHttpInfo (string boardId);
        /// <summary>
        /// Get boards
        /// </summary>
        /// <remarks>
        /// Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven&#x27;t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins). Note that you only get results instantaneously when you filter by the &#x60;team_id&#x60;, &#x60;project_id&#x60;, or both the &#x60;team_id&#x60; and &#x60;project_id&#x60;. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"> (optional)</param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="owner"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional, default to default)</param>
        /// <returns>Task of BoardsPagedResponse</returns>
        System.Threading.Tasks.Task<BoardsPagedResponse> GetBoardsAsync (string teamId = null, string projectId = null, string query = null, string owner = null, string limit = null, string offset = null, string sort = null);

        /// <summary>
        /// Get boards
        /// </summary>
        /// <remarks>
        /// Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven&#x27;t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins). Note that you only get results instantaneously when you filter by the &#x60;team_id&#x60;, &#x60;project_id&#x60;, or both the &#x60;team_id&#x60; and &#x60;project_id&#x60;. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"> (optional)</param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="owner"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional, default to default)</param>
        /// <returns>Task of ApiResponse (BoardsPagedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardsPagedResponse>> GetBoardsAsyncWithHttpInfo (string teamId = null, string projectId = null, string query = null, string owner = null, string limit = null, string offset = null, string sort = null);
        /// <summary>
        /// Get specific board
        /// </summary>
        /// <remarks>
        /// Retrieves information about a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to retrieve.</param>
        /// <returns>Task of BoardWithLinks</returns>
        System.Threading.Tasks.Task<BoardWithLinks> GetSpecificBoardAsync (string boardId);

        /// <summary>
        /// Get specific board
        /// </summary>
        /// <remarks>
        /// Retrieves information about a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to retrieve.</param>
        /// <returns>Task of ApiResponse (BoardWithLinks)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardWithLinks>> GetSpecificBoardAsyncWithHttpInfo (string boardId);
        /// <summary>
        /// Update board
        /// </summary>
        /// <remarks>
        /// Updates a specific board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to update.</param>
        /// <returns>Task of BoardWithLinks</returns>
        System.Threading.Tasks.Task<BoardWithLinks> UpdateBoardAsync (BoardChanges body, string boardId);

        /// <summary>
        /// Update board
        /// </summary>
        /// <remarks>
        /// Updates a specific board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to update.</param>
        /// <returns>Task of ApiResponse (BoardWithLinks)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardWithLinks>> UpdateBoardAsyncWithHttpInfo (BoardChanges body, string boardId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BoardsApi : IBoardsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BoardsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardsApi"/> class
        /// </summary>
        /// <returns></returns>
        public BoardsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BoardsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Copy board Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 4&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFrom">Unique identifier (ID) of the board that you want to copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BoardWithLinks</returns>
        public BoardWithLinks CopyBoard (string copyFrom, BoardChanges body = null)
        {
             ApiResponse<BoardWithLinks> localVarResponse = CopyBoardWithHttpInfo(copyFrom, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy board Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 4&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFrom">Unique identifier (ID) of the board that you want to copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BoardWithLinks</returns>
        public ApiResponse< BoardWithLinks > CopyBoardWithHttpInfo (string copyFrom, BoardChanges body = null)
        {
            // verify the required parameter 'copyFrom' is set
            if (copyFrom == null)
                throw new ApiException(400, "Missing required parameter 'copyFrom' when calling BoardsApi->CopyBoard");

            var localVarPath = "/v2/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copy_from", copyFrom)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardWithLinks)));
        }

        /// <summary>
        /// Copy board Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 4&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFrom">Unique identifier (ID) of the board that you want to copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BoardWithLinks</returns>
        public async System.Threading.Tasks.Task<BoardWithLinks> CopyBoardAsync (string copyFrom, BoardChanges body = null)
        {
             ApiResponse<BoardWithLinks> localVarResponse = await CopyBoardAsyncWithHttpInfo(copyFrom, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy board Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 4&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFrom">Unique identifier (ID) of the board that you want to copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BoardWithLinks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardWithLinks>> CopyBoardAsyncWithHttpInfo (string copyFrom, BoardChanges body = null)
        {
            // verify the required parameter 'copyFrom' is set
            if (copyFrom == null)
                throw new ApiException(400, "Missing required parameter 'copyFrom' when calling BoardsApi->CopyBoard");

            var localVarPath = "/v2/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copy_from", copyFrom)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardWithLinks)));
        }

        /// <summary>
        /// Create board Creates a board with the specified name and sharing policies.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BoardWithLinks</returns>
        public BoardWithLinks CreateBoard (BoardChanges body = null)
        {
             ApiResponse<BoardWithLinks> localVarResponse = CreateBoardWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create board Creates a board with the specified name and sharing policies.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BoardWithLinks</returns>
        public ApiResponse< BoardWithLinks > CreateBoardWithHttpInfo (BoardChanges body = null)
        {

            var localVarPath = "/v2/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardWithLinks)));
        }

        /// <summary>
        /// Create board Creates a board with the specified name and sharing policies.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BoardWithLinks</returns>
        public async System.Threading.Tasks.Task<BoardWithLinks> CreateBoardAsync (BoardChanges body = null)
        {
             ApiResponse<BoardWithLinks> localVarResponse = await CreateBoardAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create board Creates a board with the specified name and sharing policies.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BoardWithLinks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardWithLinks>> CreateBoardAsyncWithHttpInfo (BoardChanges body = null)
        {

            var localVarPath = "/v2/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardWithLinks)));
        }

        /// <summary>
        /// Delete board Deletes a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to delete.</param>
        /// <returns>Object</returns>
        public Object DeleteBoard (string boardId)
        {
             ApiResponse<Object> localVarResponse = DeleteBoardWithHttpInfo(boardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete board Deletes a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteBoardWithHttpInfo (string boardId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->DeleteBoard");

            var localVarPath = "/v2/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete board Deletes a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to delete.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteBoardAsync (string boardId)
        {
             ApiResponse<Object> localVarResponse = await DeleteBoardAsyncWithHttpInfo(boardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete board Deletes a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 3&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBoardAsyncWithHttpInfo (string boardId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->DeleteBoard");

            var localVarPath = "/v2/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get boards Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven&#x27;t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins). Note that you only get results instantaneously when you filter by the &#x60;team_id&#x60;, &#x60;project_id&#x60;, or both the &#x60;team_id&#x60; and &#x60;project_id&#x60;. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"> (optional)</param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="owner"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional, default to default)</param>
        /// <returns>BoardsPagedResponse</returns>
        public BoardsPagedResponse GetBoards (string teamId = null, string projectId = null, string query = null, string owner = null, string limit = null, string offset = null, string sort = null)
        {
             ApiResponse<BoardsPagedResponse> localVarResponse = GetBoardsWithHttpInfo(teamId, projectId, query, owner, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get boards Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven&#x27;t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins). Note that you only get results instantaneously when you filter by the &#x60;team_id&#x60;, &#x60;project_id&#x60;, or both the &#x60;team_id&#x60; and &#x60;project_id&#x60;. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"> (optional)</param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="owner"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional, default to default)</param>
        /// <returns>ApiResponse of BoardsPagedResponse</returns>
        public ApiResponse< BoardsPagedResponse > GetBoardsWithHttpInfo (string teamId = null, string projectId = null, string query = null, string owner = null, string limit = null, string offset = null, string sort = null)
        {

            var localVarPath = "/v2/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team_id", teamId)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "owner", owner)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBoards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardsPagedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardsPagedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardsPagedResponse)));
        }

        /// <summary>
        /// Get boards Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven&#x27;t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins). Note that you only get results instantaneously when you filter by the &#x60;team_id&#x60;, &#x60;project_id&#x60;, or both the &#x60;team_id&#x60; and &#x60;project_id&#x60;. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"> (optional)</param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="owner"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional, default to default)</param>
        /// <returns>Task of BoardsPagedResponse</returns>
        public async System.Threading.Tasks.Task<BoardsPagedResponse> GetBoardsAsync (string teamId = null, string projectId = null, string query = null, string owner = null, string limit = null, string offset = null, string sort = null)
        {
             ApiResponse<BoardsPagedResponse> localVarResponse = await GetBoardsAsyncWithHttpInfo(teamId, projectId, query, owner, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get boards Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven&#x27;t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins). Note that you only get results instantaneously when you filter by the &#x60;team_id&#x60;, &#x60;project_id&#x60;, or both the &#x60;team_id&#x60; and &#x60;project_id&#x60;. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"> (optional)</param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="owner"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional, default to default)</param>
        /// <returns>Task of ApiResponse (BoardsPagedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardsPagedResponse>> GetBoardsAsyncWithHttpInfo (string teamId = null, string projectId = null, string query = null, string owner = null, string limit = null, string offset = null, string sort = null)
        {

            var localVarPath = "/v2/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team_id", teamId)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "owner", owner)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBoards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardsPagedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardsPagedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardsPagedResponse)));
        }

        /// <summary>
        /// Get specific board Retrieves information about a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to retrieve.</param>
        /// <returns>BoardWithLinks</returns>
        public BoardWithLinks GetSpecificBoard (string boardId)
        {
             ApiResponse<BoardWithLinks> localVarResponse = GetSpecificBoardWithHttpInfo(boardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific board Retrieves information about a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to retrieve.</param>
        /// <returns>ApiResponse of BoardWithLinks</returns>
        public ApiResponse< BoardWithLinks > GetSpecificBoardWithHttpInfo (string boardId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->GetSpecificBoard");

            var localVarPath = "/v2/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardWithLinks)));
        }

        /// <summary>
        /// Get specific board Retrieves information about a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to retrieve.</param>
        /// <returns>Task of BoardWithLinks</returns>
        public async System.Threading.Tasks.Task<BoardWithLinks> GetSpecificBoardAsync (string boardId)
        {
             ApiResponse<BoardWithLinks> localVarResponse = await GetSpecificBoardAsyncWithHttpInfo(boardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specific board Retrieves information about a board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:read&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 1&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to retrieve.</param>
        /// <returns>Task of ApiResponse (BoardWithLinks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardWithLinks>> GetSpecificBoardAsyncWithHttpInfo (string boardId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->GetSpecificBoard");

            var localVarPath = "/v2/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardWithLinks)));
        }

        /// <summary>
        /// Update board Updates a specific board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to update.</param>
        /// <returns>BoardWithLinks</returns>
        public BoardWithLinks UpdateBoard (BoardChanges body, string boardId)
        {
             ApiResponse<BoardWithLinks> localVarResponse = UpdateBoardWithHttpInfo(body, boardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update board Updates a specific board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to update.</param>
        /// <returns>ApiResponse of BoardWithLinks</returns>
        public ApiResponse< BoardWithLinks > UpdateBoardWithHttpInfo (BoardChanges body, string boardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BoardsApi->UpdateBoard");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->UpdateBoard");

            var localVarPath = "/v2/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardWithLinks)));
        }

        /// <summary>
        /// Update board Updates a specific board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to update.</param>
        /// <returns>Task of BoardWithLinks</returns>
        public async System.Threading.Tasks.Task<BoardWithLinks> UpdateBoardAsync (BoardChanges body, string boardId)
        {
             ApiResponse<BoardWithLinks> localVarResponse = await UpdateBoardAsyncWithHttpInfo(body, boardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update board Updates a specific board.&lt;br/&gt;&lt;h3&gt;Required scope&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/scopes\&quot;&gt;boards:write&lt;/a&gt; &lt;br/&gt;&lt;h3&gt;Rate limiting&lt;/h3&gt; &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;/reference/ratelimiting\&quot;&gt;Level 2&lt;/a&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="boardId">Unique identifier (ID) of the board that you want to update.</param>
        /// <returns>Task of ApiResponse (BoardWithLinks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardWithLinks>> UpdateBoardAsyncWithHttpInfo (BoardChanges body, string boardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BoardsApi->UpdateBoard");
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->UpdateBoard");

            var localVarPath = "/v2/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardWithLinks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardWithLinks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardWithLinks)));
        }

    }
}
