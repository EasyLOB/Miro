/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains information about the shape style, such as the border color or opacity.
    /// </summary>
    [DataContract]
        public partial class ShapeStyle :  IEquatable<ShapeStyle>, IValidatableObject
    {
        /// <summary>
        /// Defines the style used to represent the border of the shape. Default: &#x60;normal&#x60;.
        /// </summary>
        /// <value>Defines the style used to represent the border of the shape. Default: &#x60;normal&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum BorderStyleEnum
        {
            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 1,
            /// <summary>
            /// Enum Dotted for value: dotted
            /// </summary>
            [EnumMember(Value = "dotted")]
            Dotted = 2,
            /// <summary>
            /// Enum Dashed for value: dashed
            /// </summary>
            [EnumMember(Value = "dashed")]
            Dashed = 3        }
        /// <summary>
        /// Defines the style used to represent the border of the shape. Default: &#x60;normal&#x60;.
        /// </summary>
        /// <value>Defines the style used to represent the border of the shape. Default: &#x60;normal&#x60;.</value>
        [DataMember(Name="borderStyle", EmitDefaultValue=false)]
        public BorderStyleEnum? BorderStyle { get; set; }
        /// <summary>
        /// Defines the font type for the text in the shape item. Default: &#x60;arial&#x60;.
        /// </summary>
        /// <value>Defines the font type for the text in the shape item. Default: &#x60;arial&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FontFamilyEnum
        {
            /// <summary>
            /// Enum Arial for value: arial
            /// </summary>
            [EnumMember(Value = "arial")]
            Arial = 1,
            /// <summary>
            /// Enum Abrilfatface for value: abril_fatface
            /// </summary>
            [EnumMember(Value = "abril_fatface")]
            Abrilfatface = 2,
            /// <summary>
            /// Enum Bangers for value: bangers
            /// </summary>
            [EnumMember(Value = "bangers")]
            Bangers = 3,
            /// <summary>
            /// Enum Ebgaramond for value: eb_garamond
            /// </summary>
            [EnumMember(Value = "eb_garamond")]
            Ebgaramond = 4,
            /// <summary>
            /// Enum Georgia for value: georgia
            /// </summary>
            [EnumMember(Value = "georgia")]
            Georgia = 5,
            /// <summary>
            /// Enum Graduate for value: graduate
            /// </summary>
            [EnumMember(Value = "graduate")]
            Graduate = 6,
            /// <summary>
            /// Enum Gravitasone for value: gravitas_one
            /// </summary>
            [EnumMember(Value = "gravitas_one")]
            Gravitasone = 7,
            /// <summary>
            /// Enum Fredokaone for value: fredoka_one
            /// </summary>
            [EnumMember(Value = "fredoka_one")]
            Fredokaone = 8,
            /// <summary>
            /// Enum Nixieone for value: nixie_one
            /// </summary>
            [EnumMember(Value = "nixie_one")]
            Nixieone = 9,
            /// <summary>
            /// Enum Opensans for value: open_sans
            /// </summary>
            [EnumMember(Value = "open_sans")]
            Opensans = 10,
            /// <summary>
            /// Enum Permanentmarker for value: permanent_marker
            /// </summary>
            [EnumMember(Value = "permanent_marker")]
            Permanentmarker = 11,
            /// <summary>
            /// Enum Ptsans for value: pt_sans
            /// </summary>
            [EnumMember(Value = "pt_sans")]
            Ptsans = 12,
            /// <summary>
            /// Enum Ptsansnarrow for value: pt_sans_narrow
            /// </summary>
            [EnumMember(Value = "pt_sans_narrow")]
            Ptsansnarrow = 13,
            /// <summary>
            /// Enum Ptserif for value: pt_serif
            /// </summary>
            [EnumMember(Value = "pt_serif")]
            Ptserif = 14,
            /// <summary>
            /// Enum Rammettoone for value: rammetto_one
            /// </summary>
            [EnumMember(Value = "rammetto_one")]
            Rammettoone = 15,
            /// <summary>
            /// Enum Roboto for value: roboto
            /// </summary>
            [EnumMember(Value = "roboto")]
            Roboto = 16,
            /// <summary>
            /// Enum Robotocondensed for value: roboto_condensed
            /// </summary>
            [EnumMember(Value = "roboto_condensed")]
            Robotocondensed = 17,
            /// <summary>
            /// Enum Robotoslab for value: roboto_slab
            /// </summary>
            [EnumMember(Value = "roboto_slab")]
            Robotoslab = 18,
            /// <summary>
            /// Enum Caveat for value: caveat
            /// </summary>
            [EnumMember(Value = "caveat")]
            Caveat = 19,
            /// <summary>
            /// Enum Timesnewroman for value: times_new_roman
            /// </summary>
            [EnumMember(Value = "times_new_roman")]
            Timesnewroman = 20,
            /// <summary>
            /// Enum Titanone for value: titan_one
            /// </summary>
            [EnumMember(Value = "titan_one")]
            Titanone = 21,
            /// <summary>
            /// Enum Lemontuesday for value: lemon_tuesday
            /// </summary>
            [EnumMember(Value = "lemon_tuesday")]
            Lemontuesday = 22,
            /// <summary>
            /// Enum Robotomono for value: roboto_mono
            /// </summary>
            [EnumMember(Value = "roboto_mono")]
            Robotomono = 23,
            /// <summary>
            /// Enum Notosans for value: noto_sans
            /// </summary>
            [EnumMember(Value = "noto_sans")]
            Notosans = 24,
            /// <summary>
            /// Enum Plexsans for value: plex_sans
            /// </summary>
            [EnumMember(Value = "plex_sans")]
            Plexsans = 25,
            /// <summary>
            /// Enum Plexserif for value: plex_serif
            /// </summary>
            [EnumMember(Value = "plex_serif")]
            Plexserif = 26,
            /// <summary>
            /// Enum Plexmono for value: plex_mono
            /// </summary>
            [EnumMember(Value = "plex_mono")]
            Plexmono = 27,
            /// <summary>
            /// Enum Spoof for value: spoof
            /// </summary>
            [EnumMember(Value = "spoof")]
            Spoof = 28,
            /// <summary>
            /// Enum Tiempostext for value: tiempos_text
            /// </summary>
            [EnumMember(Value = "tiempos_text")]
            Tiempostext = 29,
            /// <summary>
            /// Enum Formular for value: formular
            /// </summary>
            [EnumMember(Value = "formular")]
            Formular = 30        }
        /// <summary>
        /// Defines the font type for the text in the shape item. Default: &#x60;arial&#x60;.
        /// </summary>
        /// <value>Defines the font type for the text in the shape item. Default: &#x60;arial&#x60;.</value>
        [DataMember(Name="fontFamily", EmitDefaultValue=false)]
        public FontFamilyEnum? FontFamily { get; set; }
        /// <summary>
        /// Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;.
        /// </summary>
        /// <value>Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TextAlignEnum
        {
            /// <summary>
            /// Enum Left for value: left
            /// </summary>
            [EnumMember(Value = "left")]
            Left = 1,
            /// <summary>
            /// Enum Right for value: right
            /// </summary>
            [EnumMember(Value = "right")]
            Right = 2,
            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 3        }
        /// <summary>
        /// Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;.
        /// </summary>
        /// <value>Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;.</value>
        [DataMember(Name="textAlign", EmitDefaultValue=false)]
        public TextAlignEnum? TextAlign { get; set; }
        /// <summary>
        /// Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;.
        /// </summary>
        /// <value>Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TextAlignVerticalEnum
        {
            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 1,
            /// <summary>
            /// Enum Middle for value: middle
            /// </summary>
            [EnumMember(Value = "middle")]
            Middle = 2,
            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 3        }
        /// <summary>
        /// Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;.
        /// </summary>
        /// <value>Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;.</value>
        [DataMember(Name="textAlignVertical", EmitDefaultValue=false)]
        public TextAlignVerticalEnum? TextAlignVertical { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShapeStyle" /> class.
        /// </summary>
        /// <param name="borderColor">Defines the color of the border of the shape. Default: &#x60;#1a1a1a&#x60; (dark gray)..</param>
        /// <param name="borderOpacity">Defines the opacity level of the shape border. Possible values: any number between &#x60;0.0&#x60; and &#x60;1.0&#x60;, where: &#x60;0.0&#x60;: the background color is completely transparent or invisible &#x60;1.0&#x60;: the background color is completely opaque or solid Default: &#x60;1.0&#x60; (solid color)..</param>
        /// <param name="borderStyle">Defines the style used to represent the border of the shape. Default: &#x60;normal&#x60;..</param>
        /// <param name="borderWidth">Defines the thickness of the shape border, in dp. Default: &#x60;2.0&#x60;..</param>
        /// <param name="color">Hex value representing the color for the text within the shape item. Default: &#x60;#1a1a1a&#x60;..</param>
        /// <param name="fillColor">Fill color for the shape. Hex values: &#x60;#f5f6f8&#x60; &#x60;#d5f692&#x60; &#x60;#d0e17a&#x60; &#x60;#93d275&#x60; &#x60;#67c6c0&#x60; &#x60;#23bfe7&#x60; &#x60;#a6ccf5&#x60; &#x60;#7b92ff&#x60; &#x60;#fff9b1&#x60; &#x60;#f5d128&#x60; &#x60;#ff9d48&#x60; &#x60;#f16c7f&#x60; &#x60;#ea94bb&#x60; &#x60;#ffcee0&#x60; &#x60;#b384bb&#x60; &#x60;#000000&#x60; Default: #ffffff..</param>
        /// <param name="fillOpacity">Opacity level of the fill color. Possible values: any number between &#x60;0&#x60; and &#x60;1&#x60;, where: &#x60;0.0&#x60;: the background color is completely transparent or invisible &#x60;1.0&#x60;: the background color is completely opaque or solid Default: &#x60;1.0&#x60; if &#x60;fillColor&#x60; provided, &#x60;0.0&#x60; if no &#x60;fillColor&#x60; provided. .</param>
        /// <param name="fontFamily">Defines the font type for the text in the shape item. Default: &#x60;arial&#x60;..</param>
        /// <param name="fontSize">Defines the font size, in dp, for the text on the shape. Default: &#x60;14&#x60;..</param>
        /// <param name="textAlign">Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;..</param>
        /// <param name="textAlignVertical">Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;..</param>
        public ShapeStyle(string borderColor = default(string), string borderOpacity = default(string), BorderStyleEnum? borderStyle = default(BorderStyleEnum?), string borderWidth = default(string), string color = default(string), string fillColor = default(string), string fillOpacity = default(string), FontFamilyEnum? fontFamily = default(FontFamilyEnum?), string fontSize = default(string), TextAlignEnum? textAlign = default(TextAlignEnum?), TextAlignVerticalEnum? textAlignVertical = default(TextAlignVerticalEnum?))
        {
            this.BorderColor = borderColor;
            this.BorderOpacity = borderOpacity;
            this.BorderStyle = borderStyle;
            this.BorderWidth = borderWidth;
            this.Color = color;
            this.FillColor = fillColor;
            this.FillOpacity = fillOpacity;
            this.FontFamily = fontFamily;
            this.FontSize = fontSize;
            this.TextAlign = textAlign;
            this.TextAlignVertical = textAlignVertical;
        }
        
        /// <summary>
        /// Defines the color of the border of the shape. Default: &#x60;#1a1a1a&#x60; (dark gray).
        /// </summary>
        /// <value>Defines the color of the border of the shape. Default: &#x60;#1a1a1a&#x60; (dark gray).</value>
        [DataMember(Name="borderColor", EmitDefaultValue=false)]
        public string BorderColor { get; set; }

        /// <summary>
        /// Defines the opacity level of the shape border. Possible values: any number between &#x60;0.0&#x60; and &#x60;1.0&#x60;, where: &#x60;0.0&#x60;: the background color is completely transparent or invisible &#x60;1.0&#x60;: the background color is completely opaque or solid Default: &#x60;1.0&#x60; (solid color).
        /// </summary>
        /// <value>Defines the opacity level of the shape border. Possible values: any number between &#x60;0.0&#x60; and &#x60;1.0&#x60;, where: &#x60;0.0&#x60;: the background color is completely transparent or invisible &#x60;1.0&#x60;: the background color is completely opaque or solid Default: &#x60;1.0&#x60; (solid color).</value>
        [DataMember(Name="borderOpacity", EmitDefaultValue=false)]
        public string BorderOpacity { get; set; }


        /// <summary>
        /// Defines the thickness of the shape border, in dp. Default: &#x60;2.0&#x60;.
        /// </summary>
        /// <value>Defines the thickness of the shape border, in dp. Default: &#x60;2.0&#x60;.</value>
        [DataMember(Name="borderWidth", EmitDefaultValue=false)]
        public string BorderWidth { get; set; }

        /// <summary>
        /// Hex value representing the color for the text within the shape item. Default: &#x60;#1a1a1a&#x60;.
        /// </summary>
        /// <value>Hex value representing the color for the text within the shape item. Default: &#x60;#1a1a1a&#x60;.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Fill color for the shape. Hex values: &#x60;#f5f6f8&#x60; &#x60;#d5f692&#x60; &#x60;#d0e17a&#x60; &#x60;#93d275&#x60; &#x60;#67c6c0&#x60; &#x60;#23bfe7&#x60; &#x60;#a6ccf5&#x60; &#x60;#7b92ff&#x60; &#x60;#fff9b1&#x60; &#x60;#f5d128&#x60; &#x60;#ff9d48&#x60; &#x60;#f16c7f&#x60; &#x60;#ea94bb&#x60; &#x60;#ffcee0&#x60; &#x60;#b384bb&#x60; &#x60;#000000&#x60; Default: #ffffff.
        /// </summary>
        /// <value>Fill color for the shape. Hex values: &#x60;#f5f6f8&#x60; &#x60;#d5f692&#x60; &#x60;#d0e17a&#x60; &#x60;#93d275&#x60; &#x60;#67c6c0&#x60; &#x60;#23bfe7&#x60; &#x60;#a6ccf5&#x60; &#x60;#7b92ff&#x60; &#x60;#fff9b1&#x60; &#x60;#f5d128&#x60; &#x60;#ff9d48&#x60; &#x60;#f16c7f&#x60; &#x60;#ea94bb&#x60; &#x60;#ffcee0&#x60; &#x60;#b384bb&#x60; &#x60;#000000&#x60; Default: #ffffff.</value>
        [DataMember(Name="fillColor", EmitDefaultValue=false)]
        public string FillColor { get; set; }

        /// <summary>
        /// Opacity level of the fill color. Possible values: any number between &#x60;0&#x60; and &#x60;1&#x60;, where: &#x60;0.0&#x60;: the background color is completely transparent or invisible &#x60;1.0&#x60;: the background color is completely opaque or solid Default: &#x60;1.0&#x60; if &#x60;fillColor&#x60; provided, &#x60;0.0&#x60; if no &#x60;fillColor&#x60; provided. 
        /// </summary>
        /// <value>Opacity level of the fill color. Possible values: any number between &#x60;0&#x60; and &#x60;1&#x60;, where: &#x60;0.0&#x60;: the background color is completely transparent or invisible &#x60;1.0&#x60;: the background color is completely opaque or solid Default: &#x60;1.0&#x60; if &#x60;fillColor&#x60; provided, &#x60;0.0&#x60; if no &#x60;fillColor&#x60; provided. </value>
        [DataMember(Name="fillOpacity", EmitDefaultValue=false)]
        public string FillOpacity { get; set; }


        /// <summary>
        /// Defines the font size, in dp, for the text on the shape. Default: &#x60;14&#x60;.
        /// </summary>
        /// <value>Defines the font size, in dp, for the text on the shape. Default: &#x60;14&#x60;.</value>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public string FontSize { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShapeStyle {\n");
            sb.Append("  BorderColor: ").Append(BorderColor).Append("\n");
            sb.Append("  BorderOpacity: ").Append(BorderOpacity).Append("\n");
            sb.Append("  BorderStyle: ").Append(BorderStyle).Append("\n");
            sb.Append("  BorderWidth: ").Append(BorderWidth).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  FillColor: ").Append(FillColor).Append("\n");
            sb.Append("  FillOpacity: ").Append(FillOpacity).Append("\n");
            sb.Append("  FontFamily: ").Append(FontFamily).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  TextAlign: ").Append(TextAlign).Append("\n");
            sb.Append("  TextAlignVertical: ").Append(TextAlignVertical).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShapeStyle);
        }

        /// <summary>
        /// Returns true if ShapeStyle instances are equal
        /// </summary>
        /// <param name="input">Instance of ShapeStyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShapeStyle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BorderColor == input.BorderColor ||
                    (this.BorderColor != null &&
                    this.BorderColor.Equals(input.BorderColor))
                ) && 
                (
                    this.BorderOpacity == input.BorderOpacity ||
                    (this.BorderOpacity != null &&
                    this.BorderOpacity.Equals(input.BorderOpacity))
                ) && 
                (
                    this.BorderStyle == input.BorderStyle ||
                    (this.BorderStyle != null &&
                    this.BorderStyle.Equals(input.BorderStyle))
                ) && 
                (
                    this.BorderWidth == input.BorderWidth ||
                    (this.BorderWidth != null &&
                    this.BorderWidth.Equals(input.BorderWidth))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.FillColor == input.FillColor ||
                    (this.FillColor != null &&
                    this.FillColor.Equals(input.FillColor))
                ) && 
                (
                    this.FillOpacity == input.FillOpacity ||
                    (this.FillOpacity != null &&
                    this.FillOpacity.Equals(input.FillOpacity))
                ) && 
                (
                    this.FontFamily == input.FontFamily ||
                    (this.FontFamily != null &&
                    this.FontFamily.Equals(input.FontFamily))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.TextAlign == input.TextAlign ||
                    (this.TextAlign != null &&
                    this.TextAlign.Equals(input.TextAlign))
                ) && 
                (
                    this.TextAlignVertical == input.TextAlignVertical ||
                    (this.TextAlignVertical != null &&
                    this.TextAlignVertical.Equals(input.TextAlignVertical))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BorderColor != null)
                    hashCode = hashCode * 59 + this.BorderColor.GetHashCode();
                if (this.BorderOpacity != null)
                    hashCode = hashCode * 59 + this.BorderOpacity.GetHashCode();
                if (this.BorderStyle != null)
                    hashCode = hashCode * 59 + this.BorderStyle.GetHashCode();
                if (this.BorderWidth != null)
                    hashCode = hashCode * 59 + this.BorderWidth.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.FillColor != null)
                    hashCode = hashCode * 59 + this.FillColor.GetHashCode();
                if (this.FillOpacity != null)
                    hashCode = hashCode * 59 + this.FillOpacity.GetHashCode();
                if (this.FontFamily != null)
                    hashCode = hashCode * 59 + this.FontFamily.GetHashCode();
                if (this.FontSize != null)
                    hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                if (this.TextAlign != null)
                    hashCode = hashCode * 59 + this.TextAlign.GetHashCode();
                if (this.TextAlignVertical != null)
                    hashCode = hashCode * 59 + this.TextAlignVertical.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
