/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains shape item data, such as the content or shape type of the shape.
    /// </summary>
    [DataContract]
        public partial class ShapeData :  IEquatable<ShapeData>, IValidatableObject
    {
        /// <summary>
        /// Defines the geometric shape of the item when it is rendered on the board.
        /// </summary>
        /// <value>Defines the geometric shape of the item when it is rendered on the board.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ShapeEnum
        {
            /// <summary>
            /// Enum Rectangle for value: rectangle
            /// </summary>
            [EnumMember(Value = "rectangle")]
            Rectangle = 1,
            /// <summary>
            /// Enum Roundrectangle for value: round_rectangle
            /// </summary>
            [EnumMember(Value = "round_rectangle")]
            Roundrectangle = 2,
            /// <summary>
            /// Enum Circle for value: circle
            /// </summary>
            [EnumMember(Value = "circle")]
            Circle = 3,
            /// <summary>
            /// Enum Triangle for value: triangle
            /// </summary>
            [EnumMember(Value = "triangle")]
            Triangle = 4,
            /// <summary>
            /// Enum Rhombus for value: rhombus
            /// </summary>
            [EnumMember(Value = "rhombus")]
            Rhombus = 5,
            /// <summary>
            /// Enum Parallelogram for value: parallelogram
            /// </summary>
            [EnumMember(Value = "parallelogram")]
            Parallelogram = 6,
            /// <summary>
            /// Enum Trapezoid for value: trapezoid
            /// </summary>
            [EnumMember(Value = "trapezoid")]
            Trapezoid = 7,
            /// <summary>
            /// Enum Pentagon for value: pentagon
            /// </summary>
            [EnumMember(Value = "pentagon")]
            Pentagon = 8,
            /// <summary>
            /// Enum Hexagon for value: hexagon
            /// </summary>
            [EnumMember(Value = "hexagon")]
            Hexagon = 9,
            /// <summary>
            /// Enum Octagon for value: octagon
            /// </summary>
            [EnumMember(Value = "octagon")]
            Octagon = 10,
            /// <summary>
            /// Enum Wedgeroundrectanglecallout for value: wedge_round_rectangle_callout
            /// </summary>
            [EnumMember(Value = "wedge_round_rectangle_callout")]
            Wedgeroundrectanglecallout = 11,
            /// <summary>
            /// Enum Star for value: star
            /// </summary>
            [EnumMember(Value = "star")]
            Star = 12,
            /// <summary>
            /// Enum Flowchartpredefinedprocess for value: flow_chart_predefined_process
            /// </summary>
            [EnumMember(Value = "flow_chart_predefined_process")]
            Flowchartpredefinedprocess = 13,
            /// <summary>
            /// Enum Cloud for value: cloud
            /// </summary>
            [EnumMember(Value = "cloud")]
            Cloud = 14,
            /// <summary>
            /// Enum Cross for value: cross
            /// </summary>
            [EnumMember(Value = "cross")]
            Cross = 15,
            /// <summary>
            /// Enum Can for value: can
            /// </summary>
            [EnumMember(Value = "can")]
            Can = 16,
            /// <summary>
            /// Enum Rightarrow for value: right_arrow
            /// </summary>
            [EnumMember(Value = "right_arrow")]
            Rightarrow = 17,
            /// <summary>
            /// Enum Leftarrow for value: left_arrow
            /// </summary>
            [EnumMember(Value = "left_arrow")]
            Leftarrow = 18,
            /// <summary>
            /// Enum Leftrightarrow for value: left_right_arrow
            /// </summary>
            [EnumMember(Value = "left_right_arrow")]
            Leftrightarrow = 19,
            /// <summary>
            /// Enum Leftbrace for value: left_brace
            /// </summary>
            [EnumMember(Value = "left_brace")]
            Leftbrace = 20,
            /// <summary>
            /// Enum Rightbrace for value: right_brace
            /// </summary>
            [EnumMember(Value = "right_brace")]
            Rightbrace = 21        }
        /// <summary>
        /// Defines the geometric shape of the item when it is rendered on the board.
        /// </summary>
        /// <value>Defines the geometric shape of the item when it is rendered on the board.</value>
        [DataMember(Name="shape", EmitDefaultValue=false)]
        public ShapeEnum? Shape { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShapeData" /> class.
        /// </summary>
        /// <param name="content">The text you want to display on the shape..</param>
        /// <param name="shape">Defines the geometric shape of the item when it is rendered on the board. (default to ShapeEnum.Rectangle).</param>
        public ShapeData(string content = default(string), ShapeEnum? shape = ShapeEnum.Rectangle)
        {
            this.Content = content;
            // use default value if no "shape" provided
            if (shape == null)
            {
                this.Shape = ShapeEnum.Rectangle;
            }
            else
            {
                this.Shape = shape;
            }
        }
        
        /// <summary>
        /// The text you want to display on the shape.
        /// </summary>
        /// <value>The text you want to display on the shape.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShapeData {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShapeData);
        }

        /// <summary>
        /// Returns true if ShapeData instances are equal
        /// </summary>
        /// <param name="input">Instance of ShapeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShapeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Shape == input.Shape ||
                    (this.Shape != null &&
                    this.Shape.Equals(input.Shape))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Shape != null)
                    hashCode = hashCode * 59 + this.Shape.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
