/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.
    /// </summary>
    [DataContract]
        public partial class BoardSharingPolicy :  IEquatable<BoardSharingPolicy>, IValidatableObject
    {
        /// <summary>
        /// Defines the public-level access to the board.
        /// </summary>
        /// <value>Defines the public-level access to the board.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AccessEnum
        {
            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 1,
            /// <summary>
            /// Enum View for value: view
            /// </summary>
            [EnumMember(Value = "view")]
            View = 2,
            /// <summary>
            /// Enum Edit for value: edit
            /// </summary>
            [EnumMember(Value = "edit")]
            Edit = 3,
            /// <summary>
            /// Enum Comment for value: comment
            /// </summary>
            [EnumMember(Value = "comment")]
            Comment = 4        }
        /// <summary>
        /// Defines the public-level access to the board.
        /// </summary>
        /// <value>Defines the public-level access to the board.</value>
        [DataMember(Name="access", EmitDefaultValue=false)]
        public AccessEnum? Access { get; set; }
        /// <summary>
        /// Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the &#x60;inviteToAccountAndBoardLinkAccess&#x60; parameter is always set to &#x60;no_access&#x60;.
        /// </summary>
        /// <value>Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the &#x60;inviteToAccountAndBoardLinkAccess&#x60; parameter is always set to &#x60;no_access&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum InviteToAccountAndBoardLinkAccessEnum
        {
            /// <summary>
            /// Enum Viewer for value: viewer
            /// </summary>
            [EnumMember(Value = "viewer")]
            Viewer = 1,
            /// <summary>
            /// Enum Commenter for value: commenter
            /// </summary>
            [EnumMember(Value = "commenter")]
            Commenter = 2,
            /// <summary>
            /// Enum Editor for value: editor
            /// </summary>
            [EnumMember(Value = "editor")]
            Editor = 3,
            /// <summary>
            /// Enum Coowner for value: coowner
            /// </summary>
            [EnumMember(Value = "coowner")]
            Coowner = 4,
            /// <summary>
            /// Enum Owner for value: owner
            /// </summary>
            [EnumMember(Value = "owner")]
            Owner = 5,
            /// <summary>
            /// Enum Guest for value: guest
            /// </summary>
            [EnumMember(Value = "guest")]
            Guest = 6,
            /// <summary>
            /// Enum Noaccess for value: no_access
            /// </summary>
            [EnumMember(Value = "no_access")]
            Noaccess = 7        }
        /// <summary>
        /// Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the &#x60;inviteToAccountAndBoardLinkAccess&#x60; parameter is always set to &#x60;no_access&#x60;.
        /// </summary>
        /// <value>Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the &#x60;inviteToAccountAndBoardLinkAccess&#x60; parameter is always set to &#x60;no_access&#x60;.</value>
        [DataMember(Name="inviteToAccountAndBoardLinkAccess", EmitDefaultValue=false)]
        public InviteToAccountAndBoardLinkAccessEnum? InviteToAccountAndBoardLinkAccess { get; set; }
        /// <summary>
        /// Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the &#x60;organizationAccess&#x60; parameter is always set to the default value.
        /// </summary>
        /// <value>Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the &#x60;organizationAccess&#x60; parameter is always set to the default value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OrganizationAccessEnum
        {
            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 1,
            /// <summary>
            /// Enum View for value: view
            /// </summary>
            [EnumMember(Value = "view")]
            View = 2,
            /// <summary>
            /// Enum Comment for value: comment
            /// </summary>
            [EnumMember(Value = "comment")]
            Comment = 3,
            /// <summary>
            /// Enum Edit for value: edit
            /// </summary>
            [EnumMember(Value = "edit")]
            Edit = 4        }
        /// <summary>
        /// Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the &#x60;organizationAccess&#x60; parameter is always set to the default value.
        /// </summary>
        /// <value>Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the &#x60;organizationAccess&#x60; parameter is always set to the default value.</value>
        [DataMember(Name="organizationAccess", EmitDefaultValue=false)]
        public OrganizationAccessEnum? OrganizationAccess { get; set; }
        /// <summary>
        /// Defines the team-level access to the board.
        /// </summary>
        /// <value>Defines the team-level access to the board.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TeamAccessEnum
        {
            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 1,
            /// <summary>
            /// Enum View for value: view
            /// </summary>
            [EnumMember(Value = "view")]
            View = 2,
            /// <summary>
            /// Enum Comment for value: comment
            /// </summary>
            [EnumMember(Value = "comment")]
            Comment = 3,
            /// <summary>
            /// Enum Edit for value: edit
            /// </summary>
            [EnumMember(Value = "edit")]
            Edit = 4        }
        /// <summary>
        /// Defines the team-level access to the board.
        /// </summary>
        /// <value>Defines the team-level access to the board.</value>
        [DataMember(Name="teamAccess", EmitDefaultValue=false)]
        public TeamAccessEnum? TeamAccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardSharingPolicy" /> class.
        /// </summary>
        /// <param name="access">Defines the public-level access to the board..</param>
        /// <param name="inviteToAccountAndBoardLinkAccess">Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the &#x60;inviteToAccountAndBoardLinkAccess&#x60; parameter is always set to &#x60;no_access&#x60;. (default to InviteToAccountAndBoardLinkAccessEnum.Noaccess).</param>
        /// <param name="organizationAccess">Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the &#x60;organizationAccess&#x60; parameter is always set to the default value. (default to OrganizationAccessEnum.Private).</param>
        /// <param name="teamAccess">Defines the team-level access to the board..</param>
        public BoardSharingPolicy(AccessEnum? access = default(AccessEnum?), InviteToAccountAndBoardLinkAccessEnum? inviteToAccountAndBoardLinkAccess = InviteToAccountAndBoardLinkAccessEnum.Noaccess, OrganizationAccessEnum? organizationAccess = OrganizationAccessEnum.Private, TeamAccessEnum? teamAccess = default(TeamAccessEnum?))
        {
            this.Access = access;
            // use default value if no "inviteToAccountAndBoardLinkAccess" provided
            if (inviteToAccountAndBoardLinkAccess == null)
            {
                this.InviteToAccountAndBoardLinkAccess = InviteToAccountAndBoardLinkAccessEnum.Noaccess;
            }
            else
            {
                this.InviteToAccountAndBoardLinkAccess = inviteToAccountAndBoardLinkAccess;
            }
            // use default value if no "organizationAccess" provided
            if (organizationAccess == null)
            {
                this.OrganizationAccess = OrganizationAccessEnum.Private;
            }
            else
            {
                this.OrganizationAccess = organizationAccess;
            }
            this.TeamAccess = teamAccess;
        }
        




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoardSharingPolicy {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  InviteToAccountAndBoardLinkAccess: ").Append(InviteToAccountAndBoardLinkAccess).Append("\n");
            sb.Append("  OrganizationAccess: ").Append(OrganizationAccess).Append("\n");
            sb.Append("  TeamAccess: ").Append(TeamAccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoardSharingPolicy);
        }

        /// <summary>
        /// Returns true if BoardSharingPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of BoardSharingPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoardSharingPolicy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Access == input.Access ||
                    (this.Access != null &&
                    this.Access.Equals(input.Access))
                ) && 
                (
                    this.InviteToAccountAndBoardLinkAccess == input.InviteToAccountAndBoardLinkAccess ||
                    (this.InviteToAccountAndBoardLinkAccess != null &&
                    this.InviteToAccountAndBoardLinkAccess.Equals(input.InviteToAccountAndBoardLinkAccess))
                ) && 
                (
                    this.OrganizationAccess == input.OrganizationAccess ||
                    (this.OrganizationAccess != null &&
                    this.OrganizationAccess.Equals(input.OrganizationAccess))
                ) && 
                (
                    this.TeamAccess == input.TeamAccess ||
                    (this.TeamAccess != null &&
                    this.TeamAccess.Equals(input.TeamAccess))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Access != null)
                    hashCode = hashCode * 59 + this.Access.GetHashCode();
                if (this.InviteToAccountAndBoardLinkAccess != null)
                    hashCode = hashCode * 59 + this.InviteToAccountAndBoardLinkAccess.GetHashCode();
                if (this.OrganizationAccess != null)
                    hashCode = hashCode * 59 + this.OrganizationAccess.GetHashCode();
                if (this.TeamAccess != null)
                    hashCode = hashCode * 59 + this.TeamAccess.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
