/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains the result data.
    /// </summary>
    [DataContract]
        public partial class ConnectorWithLinks :  IEquatable<ConnectorWithLinks>, IValidatableObject
    {
        /// <summary>
        /// The path type of the connector line, defines curvature. Default: curved.
        /// </summary>
        /// <value>The path type of the connector line, defines curvature. Default: curved.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ShapeEnum
        {
            /// <summary>
            /// Enum Straight for value: straight
            /// </summary>
            [EnumMember(Value = "straight")]
            Straight = 1,
            /// <summary>
            /// Enum Elbowed for value: elbowed
            /// </summary>
            [EnumMember(Value = "elbowed")]
            Elbowed = 2,
            /// <summary>
            /// Enum Curved for value: curved
            /// </summary>
            [EnumMember(Value = "curved")]
            Curved = 3        }
        /// <summary>
        /// The path type of the connector line, defines curvature. Default: curved.
        /// </summary>
        /// <value>The path type of the connector line, defines curvature. Default: curved.</value>
        [DataMember(Name="shape", EmitDefaultValue=false)]
        public ShapeEnum? Shape { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorWithLinks" /> class.
        /// </summary>
        /// <param name="captions">Blocks of text you want to display on the connector..</param>
        /// <param name="createdAt">Date and time when the connector was created. &lt;br&gt;Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC))..</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="endItem">endItem.</param>
        /// <param name="id">Unique identifier (ID) of a connector. (required).</param>
        /// <param name="isSupported">Indicates whether the connector is supported at the moment. If this parameter returns &#x60;false&#x60;, we do not support the connector at the moment. We do not allow updates for unsupported connectors and we might not return all data about the connector, such as intermediate points and connection points to the canvas..</param>
        /// <param name="links">links.</param>
        /// <param name="modifiedAt">Date and time when the connector was last modified. &lt;br&gt;Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC))..</param>
        /// <param name="modifiedBy">modifiedBy.</param>
        /// <param name="shape">The path type of the connector line, defines curvature. Default: curved. (default to ShapeEnum.Curved).</param>
        /// <param name="startItem">startItem.</param>
        /// <param name="style">style.</param>
        /// <param name="type">Type of board object that is returned..</param>
        public ConnectorWithLinks(List<Caption> captions = default(List<Caption>), DateTime? createdAt = default(DateTime?), CreatedBy createdBy = default(CreatedBy), ItemConnectionWithLinks endItem = default(ItemConnectionWithLinks), string id = default(string), bool? isSupported = default(bool?), SelfLink links = default(SelfLink), DateTime? modifiedAt = default(DateTime?), ModifiedBy modifiedBy = default(ModifiedBy), ShapeEnum? shape = ShapeEnum.Curved, ItemConnectionWithLinks startItem = default(ItemConnectionWithLinks), ConnectorStyle style = default(ConnectorStyle), string type = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ConnectorWithLinks and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.Captions = captions;
            this.CreatedAt = createdAt;
            this.CreatedBy = createdBy;
            this.EndItem = endItem;
            this.IsSupported = isSupported;
            this.Links = links;
            this.ModifiedAt = modifiedAt;
            this.ModifiedBy = modifiedBy;
            // use default value if no "shape" provided
            if (shape == null)
            {
                this.Shape = ShapeEnum.Curved;
            }
            else
            {
                this.Shape = shape;
            }
            this.StartItem = startItem;
            this.Style = style;
            this.Type = type;
        }
        
        /// <summary>
        /// Blocks of text you want to display on the connector.
        /// </summary>
        /// <value>Blocks of text you want to display on the connector.</value>
        [DataMember(Name="captions", EmitDefaultValue=false)]
        public List<Caption> Captions { get; set; }

        /// <summary>
        /// Date and time when the connector was created. &lt;br&gt;Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
        /// </summary>
        /// <value>Date and time when the connector was created. &lt;br&gt;Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public CreatedBy CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets EndItem
        /// </summary>
        [DataMember(Name="endItem", EmitDefaultValue=false)]
        public ItemConnectionWithLinks EndItem { get; set; }

        /// <summary>
        /// Unique identifier (ID) of a connector.
        /// </summary>
        /// <value>Unique identifier (ID) of a connector.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates whether the connector is supported at the moment. If this parameter returns &#x60;false&#x60;, we do not support the connector at the moment. We do not allow updates for unsupported connectors and we might not return all data about the connector, such as intermediate points and connection points to the canvas.
        /// </summary>
        /// <value>Indicates whether the connector is supported at the moment. If this parameter returns &#x60;false&#x60;, we do not support the connector at the moment. We do not allow updates for unsupported connectors and we might not return all data about the connector, such as intermediate points and connection points to the canvas.</value>
        [DataMember(Name="isSupported", EmitDefaultValue=false)]
        public bool? IsSupported { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public SelfLink Links { get; set; }

        /// <summary>
        /// Date and time when the connector was last modified. &lt;br&gt;Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
        /// </summary>
        /// <value>Date and time when the connector was last modified. &lt;br&gt;Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).</value>
        [DataMember(Name="modifiedAt", EmitDefaultValue=false)]
        public DateTime? ModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name="modifiedBy", EmitDefaultValue=false)]
        public ModifiedBy ModifiedBy { get; set; }


        /// <summary>
        /// Gets or Sets StartItem
        /// </summary>
        [DataMember(Name="startItem", EmitDefaultValue=false)]
        public ItemConnectionWithLinks StartItem { get; set; }

        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public ConnectorStyle Style { get; set; }

        /// <summary>
        /// Type of board object that is returned.
        /// </summary>
        /// <value>Type of board object that is returned.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectorWithLinks {\n");
            sb.Append("  Captions: ").Append(Captions).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  EndItem: ").Append(EndItem).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsSupported: ").Append(IsSupported).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  StartItem: ").Append(StartItem).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorWithLinks);
        }

        /// <summary>
        /// Returns true if ConnectorWithLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorWithLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorWithLinks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Captions == input.Captions ||
                    this.Captions != null &&
                    input.Captions != null &&
                    this.Captions.SequenceEqual(input.Captions)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.EndItem == input.EndItem ||
                    (this.EndItem != null &&
                    this.EndItem.Equals(input.EndItem))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsSupported == input.IsSupported ||
                    (this.IsSupported != null &&
                    this.IsSupported.Equals(input.IsSupported))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    (this.ModifiedBy != null &&
                    this.ModifiedBy.Equals(input.ModifiedBy))
                ) && 
                (
                    this.Shape == input.Shape ||
                    (this.Shape != null &&
                    this.Shape.Equals(input.Shape))
                ) && 
                (
                    this.StartItem == input.StartItem ||
                    (this.StartItem != null &&
                    this.StartItem.Equals(input.StartItem))
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Captions != null)
                    hashCode = hashCode * 59 + this.Captions.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.EndItem != null)
                    hashCode = hashCode * 59 + this.EndItem.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsSupported != null)
                    hashCode = hashCode * 59 + this.IsSupported.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                if (this.ModifiedBy != null)
                    hashCode = hashCode * 59 + this.ModifiedBy.GetHashCode();
                if (this.Shape != null)
                    hashCode = hashCode * 59 + this.Shape.GetHashCode();
                if (this.StartItem != null)
                    hashCode = hashCode * 59 + this.StartItem.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
