/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BoardsPagedResponse
    /// </summary>
    [DataContract]
        public partial class BoardsPagedResponse :  IEquatable<BoardsPagedResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardsPagedResponse" /> class.
        /// </summary>
        /// <param name="data">Contains the result data..</param>
        /// <param name="total">Total number of results available. If the value of the &#x60;total&#x60; parameter is higher than the value of the &#x60;size&#x60; parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the &#x60;offset&#x60; value accordingly. For example, if there are &#x60;30&#x60; results, and the request has the &#x60;offset&#x60; set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; parameter will return &#x60;20&#x60; and the &#x60;total&#x60; parameter will return &#x60;30&#x60;. This means that there are 9 more results to retrieve (as the offset is zero-based)..</param>
        /// <param name="size">Number of results returned in the response. The &#x60;size&#x60; is the number of results returned considering the &#x60;offset&#x60; and the &#x60;limit&#x60; values sent in the request. For example, if there are &#x60;30&#x60; results, and the request has the offset set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;20&#x60;.&lt;br&gt;If there are &#x60;10&#x60; results, and the request has the offset set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;10&#x60;.&lt;br&gt;If there are &#x60;30&#x60; results, and the request has the offset set to &#x60;28&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;2&#x60; as the &#x60;offset&#x60; is the zero-based offset of the first item in the collection..</param>
        /// <param name="offset">Zero-based index of the first item in the collection. For example, If there are &#x60;30&#x60; results, and the request has the offset set to &#x60;28&#x60;, the response will return &#x60;2&#x60; results..</param>
        /// <param name="limit">Maximum number of results returned based on the &#x60;limit&#x60; specified in the request. For example, if there are &#x60;30&#x60; results, and the request has the offset set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;20&#x60;. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based. .</param>
        /// <param name="links">links.</param>
        /// <param name="type">type.</param>
        public BoardsPagedResponse(List<Board> data = default(List<Board>), long? total = default(long?), int? size = default(int?), int? offset = default(int?), int? limit = default(int?), PageLinks links = default(PageLinks), string type = default(string))
        {
            this.Data = data;
            this.Total = total;
            this.Size = size;
            this.Offset = offset;
            this.Limit = limit;
            this.Links = links;
            this.Type = type;
        }
        
        /// <summary>
        /// Contains the result data.
        /// </summary>
        /// <value>Contains the result data.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<Board> Data { get; set; }

        /// <summary>
        /// Total number of results available. If the value of the &#x60;total&#x60; parameter is higher than the value of the &#x60;size&#x60; parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the &#x60;offset&#x60; value accordingly. For example, if there are &#x60;30&#x60; results, and the request has the &#x60;offset&#x60; set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; parameter will return &#x60;20&#x60; and the &#x60;total&#x60; parameter will return &#x60;30&#x60;. This means that there are 9 more results to retrieve (as the offset is zero-based).
        /// </summary>
        /// <value>Total number of results available. If the value of the &#x60;total&#x60; parameter is higher than the value of the &#x60;size&#x60; parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the &#x60;offset&#x60; value accordingly. For example, if there are &#x60;30&#x60; results, and the request has the &#x60;offset&#x60; set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; parameter will return &#x60;20&#x60; and the &#x60;total&#x60; parameter will return &#x60;30&#x60;. This means that there are 9 more results to retrieve (as the offset is zero-based).</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public long? Total { get; set; }

        /// <summary>
        /// Number of results returned in the response. The &#x60;size&#x60; is the number of results returned considering the &#x60;offset&#x60; and the &#x60;limit&#x60; values sent in the request. For example, if there are &#x60;30&#x60; results, and the request has the offset set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;20&#x60;.&lt;br&gt;If there are &#x60;10&#x60; results, and the request has the offset set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;10&#x60;.&lt;br&gt;If there are &#x60;30&#x60; results, and the request has the offset set to &#x60;28&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;2&#x60; as the &#x60;offset&#x60; is the zero-based offset of the first item in the collection.
        /// </summary>
        /// <value>Number of results returned in the response. The &#x60;size&#x60; is the number of results returned considering the &#x60;offset&#x60; and the &#x60;limit&#x60; values sent in the request. For example, if there are &#x60;30&#x60; results, and the request has the offset set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;20&#x60;.&lt;br&gt;If there are &#x60;10&#x60; results, and the request has the offset set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;10&#x60;.&lt;br&gt;If there are &#x60;30&#x60; results, and the request has the offset set to &#x60;28&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;2&#x60; as the &#x60;offset&#x60; is the zero-based offset of the first item in the collection.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Zero-based index of the first item in the collection. For example, If there are &#x60;30&#x60; results, and the request has the offset set to &#x60;28&#x60;, the response will return &#x60;2&#x60; results.
        /// </summary>
        /// <value>Zero-based index of the first item in the collection. For example, If there are &#x60;30&#x60; results, and the request has the offset set to &#x60;28&#x60;, the response will return &#x60;2&#x60; results.</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }

        /// <summary>
        /// Maximum number of results returned based on the &#x60;limit&#x60; specified in the request. For example, if there are &#x60;30&#x60; results, and the request has the offset set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;20&#x60;. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based. 
        /// </summary>
        /// <value>Maximum number of results returned based on the &#x60;limit&#x60; specified in the request. For example, if there are &#x60;30&#x60; results, and the request has the offset set to &#x60;0&#x60; and the &#x60;limit&#x60; set to &#x60;20&#x60;, the &#x60;size&#x60; of the results will be &#x60;20&#x60;. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based. </value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public PageLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoardsPagedResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoardsPagedResponse);
        }

        /// <summary>
        /// Returns true if BoardsPagedResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BoardsPagedResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoardsPagedResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
