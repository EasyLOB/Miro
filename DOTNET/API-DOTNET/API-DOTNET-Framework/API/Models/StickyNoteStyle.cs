/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains information about the style of a sticky note item, such as the fill color or text alignment.
    /// </summary>
    [DataContract]
        public partial class StickyNoteStyle :  IEquatable<StickyNoteStyle>, IValidatableObject
    {
        /// <summary>
        /// Fill color for the sticky note. Default: &#x60;light_yellow&#x60;.
        /// </summary>
        /// <value>Fill color for the sticky note. Default: &#x60;light_yellow&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FillColorEnum
        {
            /// <summary>
            /// Enum Gray for value: gray
            /// </summary>
            [EnumMember(Value = "gray")]
            Gray = 1,
            /// <summary>
            /// Enum Lightyellow for value: light_yellow
            /// </summary>
            [EnumMember(Value = "light_yellow")]
            Lightyellow = 2,
            /// <summary>
            /// Enum Yellow for value: yellow
            /// </summary>
            [EnumMember(Value = "yellow")]
            Yellow = 3,
            /// <summary>
            /// Enum Orange for value: orange
            /// </summary>
            [EnumMember(Value = "orange")]
            Orange = 4,
            /// <summary>
            /// Enum Lightgreen for value: light_green
            /// </summary>
            [EnumMember(Value = "light_green")]
            Lightgreen = 5,
            /// <summary>
            /// Enum Green for value: green
            /// </summary>
            [EnumMember(Value = "green")]
            Green = 6,
            /// <summary>
            /// Enum Darkgreen for value: dark_green
            /// </summary>
            [EnumMember(Value = "dark_green")]
            Darkgreen = 7,
            /// <summary>
            /// Enum Cyan for value: cyan
            /// </summary>
            [EnumMember(Value = "cyan")]
            Cyan = 8,
            /// <summary>
            /// Enum Lightpink for value: light_pink
            /// </summary>
            [EnumMember(Value = "light_pink")]
            Lightpink = 9,
            /// <summary>
            /// Enum Pink for value: pink
            /// </summary>
            [EnumMember(Value = "pink")]
            Pink = 10,
            /// <summary>
            /// Enum Violet for value: violet
            /// </summary>
            [EnumMember(Value = "violet")]
            Violet = 11,
            /// <summary>
            /// Enum Red for value: red
            /// </summary>
            [EnumMember(Value = "red")]
            Red = 12,
            /// <summary>
            /// Enum Lightblue for value: light_blue
            /// </summary>
            [EnumMember(Value = "light_blue")]
            Lightblue = 13,
            /// <summary>
            /// Enum Blue for value: blue
            /// </summary>
            [EnumMember(Value = "blue")]
            Blue = 14,
            /// <summary>
            /// Enum Darkblue for value: dark_blue
            /// </summary>
            [EnumMember(Value = "dark_blue")]
            Darkblue = 15,
            /// <summary>
            /// Enum Black for value: black
            /// </summary>
            [EnumMember(Value = "black")]
            Black = 16        }
        /// <summary>
        /// Fill color for the sticky note. Default: &#x60;light_yellow&#x60;.
        /// </summary>
        /// <value>Fill color for the sticky note. Default: &#x60;light_yellow&#x60;.</value>
        [DataMember(Name="fillColor", EmitDefaultValue=false)]
        public FillColorEnum? FillColor { get; set; }
        /// <summary>
        /// Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;.
        /// </summary>
        /// <value>Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TextAlignEnum
        {
            /// <summary>
            /// Enum Left for value: left
            /// </summary>
            [EnumMember(Value = "left")]
            Left = 1,
            /// <summary>
            /// Enum Right for value: right
            /// </summary>
            [EnumMember(Value = "right")]
            Right = 2,
            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 3        }
        /// <summary>
        /// Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;.
        /// </summary>
        /// <value>Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;.</value>
        [DataMember(Name="textAlign", EmitDefaultValue=false)]
        public TextAlignEnum? TextAlign { get; set; }
        /// <summary>
        /// Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;.
        /// </summary>
        /// <value>Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TextAlignVerticalEnum
        {
            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 1,
            /// <summary>
            /// Enum Middle for value: middle
            /// </summary>
            [EnumMember(Value = "middle")]
            Middle = 2,
            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 3        }
        /// <summary>
        /// Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;.
        /// </summary>
        /// <value>Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;.</value>
        [DataMember(Name="textAlignVertical", EmitDefaultValue=false)]
        public TextAlignVerticalEnum? TextAlignVertical { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StickyNoteStyle" /> class.
        /// </summary>
        /// <param name="fillColor">Fill color for the sticky note. Default: &#x60;light_yellow&#x60;..</param>
        /// <param name="textAlign">Defines how the sticky note text is horizontally aligned. Default: &#x60;center&#x60;..</param>
        /// <param name="textAlignVertical">Defines how the sticky note text is vertically aligned. Default: &#x60;top&#x60;..</param>
        public StickyNoteStyle(FillColorEnum? fillColor = default(FillColorEnum?), TextAlignEnum? textAlign = default(TextAlignEnum?), TextAlignVerticalEnum? textAlignVertical = default(TextAlignVerticalEnum?))
        {
            this.FillColor = fillColor;
            this.TextAlign = textAlign;
            this.TextAlignVertical = textAlignVertical;
        }
        



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StickyNoteStyle {\n");
            sb.Append("  FillColor: ").Append(FillColor).Append("\n");
            sb.Append("  TextAlign: ").Append(TextAlign).Append("\n");
            sb.Append("  TextAlignVertical: ").Append(TextAlignVertical).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StickyNoteStyle);
        }

        /// <summary>
        /// Returns true if StickyNoteStyle instances are equal
        /// </summary>
        /// <param name="input">Instance of StickyNoteStyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StickyNoteStyle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FillColor == input.FillColor ||
                    (this.FillColor != null &&
                    this.FillColor.Equals(input.FillColor))
                ) && 
                (
                    this.TextAlign == input.TextAlign ||
                    (this.TextAlign != null &&
                    this.TextAlign.Equals(input.TextAlign))
                ) && 
                (
                    this.TextAlignVertical == input.TextAlignVertical ||
                    (this.TextAlignVertical != null &&
                    this.TextAlignVertical.Equals(input.TextAlignVertical))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FillColor != null)
                    hashCode = hashCode * 59 + this.FillColor.GetHashCode();
                if (this.TextAlign != null)
                    hashCode = hashCode * 59 + this.TextAlign.GetHashCode();
                if (this.TextAlignVertical != null)
                    hashCode = hashCode * 59 + this.TextAlignVertical.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
