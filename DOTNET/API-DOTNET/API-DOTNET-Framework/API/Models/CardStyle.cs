/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains information about the style of a card item, such as the card theme.
    /// </summary>
    [DataContract]
        public partial class CardStyle :  IEquatable<CardStyle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardStyle" /> class.
        /// </summary>
        /// <param name="cardTheme">Hex value of the border color of the card. Default: &#x60;#2d9bf0&#x60;..</param>
        public CardStyle(string cardTheme = default(string))
        {
            this.CardTheme = cardTheme;
        }
        
        /// <summary>
        /// Hex value of the border color of the card. Default: &#x60;#2d9bf0&#x60;.
        /// </summary>
        /// <value>Hex value of the border color of the card. Default: &#x60;#2d9bf0&#x60;.</value>
        [DataMember(Name="cardTheme", EmitDefaultValue=false)]
        public string CardTheme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardStyle {\n");
            sb.Append("  CardTheme: ").Append(CardTheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardStyle);
        }

        /// <summary>
        /// Returns true if CardStyle instances are equal
        /// </summary>
        /// <param name="input">Instance of CardStyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardStyle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardTheme == input.CardTheme ||
                    (this.CardTheme != null &&
                    this.CardTheme.Equals(input.CardTheme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardTheme != null)
                    hashCode = hashCode * 59 + this.CardTheme.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
