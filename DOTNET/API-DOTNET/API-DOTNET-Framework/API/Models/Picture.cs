/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains information about the cover picture of the board.
    /// </summary>
    [DataContract]
        public partial class Picture :  IEquatable<Picture>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Picture" /> class.
        /// </summary>
        /// <param name="id">Unique identifier (ID) of the cover picture for the board..</param>
        /// <param name="imageURL">URL of the cover picture of the board..</param>
        public Picture(long? id = default(long?), string imageURL = default(string))
        {
            this.Id = id;
            this.ImageURL = imageURL;
        }
        
        /// <summary>
        /// Unique identifier (ID) of the cover picture for the board.
        /// </summary>
        /// <value>Unique identifier (ID) of the cover picture for the board.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// URL of the cover picture of the board.
        /// </summary>
        /// <value>URL of the cover picture of the board.</value>
        [DataMember(Name="imageURL", EmitDefaultValue=false)]
        public string ImageURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Picture {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageURL: ").Append(ImageURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Picture);
        }

        /// <summary>
        /// Returns true if Picture instances are equal
        /// </summary>
        /// <param name="input">Instance of Picture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Picture input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageURL == input.ImageURL ||
                    (this.ImageURL != null &&
                    this.ImageURL.Equals(input.ImageURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImageURL != null)
                    hashCode = hashCode * 59 + this.ImageURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
