/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InvitationResult
    /// </summary>
    [DataContract]
        public partial class InvitationResult :  IEquatable<InvitationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationResult" /> class.
        /// </summary>
        /// <param name="failed">Contains information about the invites that failed..</param>
        /// <param name="successful">Contains information about the invites that were successfully sent..</param>
        public InvitationResult(List<InvitationError> failed = default(List<InvitationError>), List<long?> successful = default(List<long?>))
        {
            this.Failed = failed;
            this.Successful = successful;
        }
        
        /// <summary>
        /// Contains information about the invites that failed.
        /// </summary>
        /// <value>Contains information about the invites that failed.</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public List<InvitationError> Failed { get; set; }

        /// <summary>
        /// Contains information about the invites that were successfully sent.
        /// </summary>
        /// <value>Contains information about the invites that were successfully sent.</value>
        [DataMember(Name="successful", EmitDefaultValue=false)]
        public List<long?> Successful { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvitationResult {\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvitationResult);
        }

        /// <summary>
        /// Returns true if InvitationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of InvitationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvitationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Failed == input.Failed ||
                    this.Failed != null &&
                    input.Failed != null &&
                    this.Failed.SequenceEqual(input.Failed)
                ) && 
                (
                    this.Successful == input.Successful ||
                    this.Successful != null &&
                    input.Successful != null &&
                    this.Successful.SequenceEqual(input.Successful)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
