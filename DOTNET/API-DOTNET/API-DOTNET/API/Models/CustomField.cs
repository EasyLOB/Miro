/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.
    /// </summary>
    [DataContract]
        public partial class CustomField :  IEquatable<CustomField>, IValidatableObject
    {
        /// <summary>
        /// The shape of the icon on the preview field.
        /// </summary>
        /// <value>The shape of the icon on the preview field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum IconShapeEnum
        {
            /// <summary>
            /// Enum Round for value: round
            /// </summary>
            [EnumMember(Value = "round")]
            Round = 1,
            /// <summary>
            /// Enum Square for value: square
            /// </summary>
            [EnumMember(Value = "square")]
            Square = 2        }
        /// <summary>
        /// The shape of the icon on the preview field.
        /// </summary>
        /// <value>The shape of the icon on the preview field.</value>
        [DataMember(Name="iconShape", EmitDefaultValue=false)]
        public IconShapeEnum? IconShape { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomField" /> class.
        /// </summary>
        /// <param name="fillColor">Hex value representing the color that fills the background area of the preview field, when it&#x27;s displayed on the app card..</param>
        /// <param name="iconShape">The shape of the icon on the preview field. (default to IconShapeEnum.Round).</param>
        /// <param name="iconUrl">A valid URL pointing to an image available online. The transport protocol must be HTTPS. Possible image file formats: JPG/JPEG, PNG, SVG..</param>
        /// <param name="textColor">Hex value representing the color of the text string assigned to &#x60;value&#x60;..</param>
        /// <param name="tooltip">A short text displayed in a tooltip when clicking or hovering over the preview field..</param>
        /// <param name="value">The actual data value of the custom field. It can be any type of information that you want to convey..</param>
        public CustomField(string fillColor = default(string), IconShapeEnum? iconShape = IconShapeEnum.Round, string iconUrl = default(string), string textColor = default(string), string tooltip = default(string), string value = default(string))
        {
            this.FillColor = fillColor;
            // use default value if no "iconShape" provided
            if (iconShape == null)
            {
                this.IconShape = IconShapeEnum.Round;
            }
            else
            {
                this.IconShape = iconShape;
            }
            this.IconUrl = iconUrl;
            this.TextColor = textColor;
            this.Tooltip = tooltip;
            this.Value = value;
        }
        
        /// <summary>
        /// Hex value representing the color that fills the background area of the preview field, when it&#x27;s displayed on the app card.
        /// </summary>
        /// <value>Hex value representing the color that fills the background area of the preview field, when it&#x27;s displayed on the app card.</value>
        [DataMember(Name="fillColor", EmitDefaultValue=false)]
        public string FillColor { get; set; }


        /// <summary>
        /// A valid URL pointing to an image available online. The transport protocol must be HTTPS. Possible image file formats: JPG/JPEG, PNG, SVG.
        /// </summary>
        /// <value>A valid URL pointing to an image available online. The transport protocol must be HTTPS. Possible image file formats: JPG/JPEG, PNG, SVG.</value>
        [DataMember(Name="iconUrl", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Hex value representing the color of the text string assigned to &#x60;value&#x60;.
        /// </summary>
        /// <value>Hex value representing the color of the text string assigned to &#x60;value&#x60;.</value>
        [DataMember(Name="textColor", EmitDefaultValue=false)]
        public string TextColor { get; set; }

        /// <summary>
        /// A short text displayed in a tooltip when clicking or hovering over the preview field.
        /// </summary>
        /// <value>A short text displayed in a tooltip when clicking or hovering over the preview field.</value>
        [DataMember(Name="tooltip", EmitDefaultValue=false)]
        public string Tooltip { get; set; }

        /// <summary>
        /// The actual data value of the custom field. It can be any type of information that you want to convey.
        /// </summary>
        /// <value>The actual data value of the custom field. It can be any type of information that you want to convey.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomField {\n");
            sb.Append("  FillColor: ").Append(FillColor).Append("\n");
            sb.Append("  IconShape: ").Append(IconShape).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  TextColor: ").Append(TextColor).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomField);
        }

        /// <summary>
        /// Returns true if CustomField instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FillColor == input.FillColor ||
                    (this.FillColor != null &&
                    this.FillColor.Equals(input.FillColor))
                ) && 
                (
                    this.IconShape == input.IconShape ||
                    (this.IconShape != null &&
                    this.IconShape.Equals(input.IconShape))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.TextColor == input.TextColor ||
                    (this.TextColor != null &&
                    this.TextColor.Equals(input.TextColor))
                ) && 
                (
                    this.Tooltip == input.Tooltip ||
                    (this.Tooltip != null &&
                    this.Tooltip.Equals(input.Tooltip))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FillColor != null)
                    hashCode = hashCode * 59 + this.FillColor.GetHashCode();
                if (this.IconShape != null)
                    hashCode = hashCode * 59 + this.IconShape.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                if (this.TextColor != null)
                    hashCode = hashCode * 59 + this.TextColor.GetHashCode();
                if (this.Tooltip != null)
                    hashCode = hashCode * 59 + this.Tooltip.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
