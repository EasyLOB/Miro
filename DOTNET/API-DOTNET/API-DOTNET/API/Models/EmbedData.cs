/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EmbedData
    /// </summary>
    [DataContract]
        public partial class EmbedData :  IEquatable<EmbedData>, IValidatableObject
    {
        /// <summary>
        /// Defines how the content in the embed item is displayed on the board. &#x60;inline&#x60;: The embedded content is displayed directly on the board. &#x60;modal&#x60;: The embedded content is displayed inside a modal overlay on the board.
        /// </summary>
        /// <value>Defines how the content in the embed item is displayed on the board. &#x60;inline&#x60;: The embedded content is displayed directly on the board. &#x60;modal&#x60;: The embedded content is displayed inside a modal overlay on the board.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ModeEnum
        {
            /// <summary>
            /// Enum Inline for value: inline
            /// </summary>
            [EnumMember(Value = "inline")]
            Inline = 1,
            /// <summary>
            /// Enum Modal for value: modal
            /// </summary>
            [EnumMember(Value = "modal")]
            Modal = 2        }
        /// <summary>
        /// Defines how the content in the embed item is displayed on the board. &#x60;inline&#x60;: The embedded content is displayed directly on the board. &#x60;modal&#x60;: The embedded content is displayed inside a modal overlay on the board.
        /// </summary>
        /// <value>Defines how the content in the embed item is displayed on the board. &#x60;inline&#x60;: The embedded content is displayed directly on the board. &#x60;modal&#x60;: The embedded content is displayed inside a modal overlay on the board.</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedData" /> class.
        /// </summary>
        /// <param name="contentType">Type of the embedded item&#x27;s content..</param>
        /// <param name="description">Short description of the embedded item..</param>
        /// <param name="html">Html code of the embedded item..</param>
        /// <param name="mode">Defines how the content in the embed item is displayed on the board. &#x60;inline&#x60;: The embedded content is displayed directly on the board. &#x60;modal&#x60;: The embedded content is displayed inside a modal overlay on the board..</param>
        /// <param name="previewUrl">The URL to download the resource. You must use your access token to access the URL.  The URL contains the &#x60;redirect&#x60; parameter and the &#x60;format&#x60; parameter to control the request execution as described in the following parameters: &#x60;format&#x60; parameter: By default, the image format is set to the preview image. If you want to download the original image, set the &#x60;format&#x60; parameter in the URL to &#x60;original&#x60;. &#x60;redirect&#x60;: By default, the &#x60;redirect&#x60; parameter is set to &#x60;false&#x60; and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file. If the &#x60;redirect&#x60; parameter is set to &#x60;true&#x60;, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be &#x60;image/png&#x60;, &#x27;image/svg&#x27;, or &#x27;image/jpg&#x27;, depending on the original image type..</param>
        /// <param name="providerName">Name of the content&#x27;s provider..</param>
        /// <param name="providerUrl">Url of the content&#x27;s provider..</param>
        /// <param name="title">Title of the embedded item..</param>
        /// <param name="url">A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS..</param>
        public EmbedData(string contentType = default(string), string description = default(string), string html = default(string), ModeEnum? mode = default(ModeEnum?), string previewUrl = default(string), string providerName = default(string), string providerUrl = default(string), string title = default(string), string url = default(string))
        {
            this.ContentType = contentType;
            this.Description = description;
            this.Html = html;
            this.Mode = mode;
            this.PreviewUrl = previewUrl;
            this.ProviderName = providerName;
            this.ProviderUrl = providerUrl;
            this.Title = title;
            this.Url = url;
        }
        
        /// <summary>
        /// Type of the embedded item&#x27;s content.
        /// </summary>
        /// <value>Type of the embedded item&#x27;s content.</value>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Short description of the embedded item.
        /// </summary>
        /// <value>Short description of the embedded item.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Html code of the embedded item.
        /// </summary>
        /// <value>Html code of the embedded item.</value>
        [DataMember(Name="html", EmitDefaultValue=false)]
        public string Html { get; set; }


        /// <summary>
        /// The URL to download the resource. You must use your access token to access the URL.  The URL contains the &#x60;redirect&#x60; parameter and the &#x60;format&#x60; parameter to control the request execution as described in the following parameters: &#x60;format&#x60; parameter: By default, the image format is set to the preview image. If you want to download the original image, set the &#x60;format&#x60; parameter in the URL to &#x60;original&#x60;. &#x60;redirect&#x60;: By default, the &#x60;redirect&#x60; parameter is set to &#x60;false&#x60; and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file. If the &#x60;redirect&#x60; parameter is set to &#x60;true&#x60;, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be &#x60;image/png&#x60;, &#x27;image/svg&#x27;, or &#x27;image/jpg&#x27;, depending on the original image type.
        /// </summary>
        /// <value>The URL to download the resource. You must use your access token to access the URL.  The URL contains the &#x60;redirect&#x60; parameter and the &#x60;format&#x60; parameter to control the request execution as described in the following parameters: &#x60;format&#x60; parameter: By default, the image format is set to the preview image. If you want to download the original image, set the &#x60;format&#x60; parameter in the URL to &#x60;original&#x60;. &#x60;redirect&#x60;: By default, the &#x60;redirect&#x60; parameter is set to &#x60;false&#x60; and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file. If the &#x60;redirect&#x60; parameter is set to &#x60;true&#x60;, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be &#x60;image/png&#x60;, &#x27;image/svg&#x27;, or &#x27;image/jpg&#x27;, depending on the original image type.</value>
        [DataMember(Name="previewUrl", EmitDefaultValue=false)]
        public string PreviewUrl { get; set; }

        /// <summary>
        /// Name of the content&#x27;s provider.
        /// </summary>
        /// <value>Name of the content&#x27;s provider.</value>
        [DataMember(Name="providerName", EmitDefaultValue=false)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Url of the content&#x27;s provider.
        /// </summary>
        /// <value>Url of the content&#x27;s provider.</value>
        [DataMember(Name="providerUrl", EmitDefaultValue=false)]
        public string ProviderUrl { get; set; }

        /// <summary>
        /// Title of the embedded item.
        /// </summary>
        /// <value>Title of the embedded item.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.
        /// </summary>
        /// <value>A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmbedData {\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  PreviewUrl: ").Append(PreviewUrl).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ProviderUrl: ").Append(ProviderUrl).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmbedData);
        }

        /// <summary>
        /// Returns true if EmbedData instances are equal
        /// </summary>
        /// <param name="input">Instance of EmbedData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmbedData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.PreviewUrl == input.PreviewUrl ||
                    (this.PreviewUrl != null &&
                    this.PreviewUrl.Equals(input.PreviewUrl))
                ) && 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.ProviderUrl == input.ProviderUrl ||
                    (this.ProviderUrl != null &&
                    this.ProviderUrl.Equals(input.ProviderUrl))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.PreviewUrl != null)
                    hashCode = hashCode * 59 + this.PreviewUrl.GetHashCode();
                if (this.ProviderName != null)
                    hashCode = hashCode * 59 + this.ProviderName.GetHashCode();
                if (this.ProviderUrl != null)
                    hashCode = hashCode * 59 + this.ProviderUrl.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
