/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains information about the style of a connector, such as the color or caption font size
    /// </summary>
    [DataContract]
        public partial class ConnectorStyle :  IEquatable<ConnectorStyle>, IValidatableObject
    {
        /// <summary>
        /// The decoration cap of the connector end, like an arrow or circle. Default: stealth.
        /// </summary>
        /// <value>The decoration cap of the connector end, like an arrow or circle. Default: stealth.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EndStrokeCapEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            /// <summary>
            /// Enum Stealth for value: stealth
            /// </summary>
            [EnumMember(Value = "stealth")]
            Stealth = 2,
            /// <summary>
            /// Enum Diamond for value: diamond
            /// </summary>
            [EnumMember(Value = "diamond")]
            Diamond = 3,
            /// <summary>
            /// Enum Diamondfilled for value: diamond_filled
            /// </summary>
            [EnumMember(Value = "diamond_filled")]
            Diamondfilled = 4,
            /// <summary>
            /// Enum Oval for value: oval
            /// </summary>
            [EnumMember(Value = "oval")]
            Oval = 5,
            /// <summary>
            /// Enum Ovalfilled for value: oval_filled
            /// </summary>
            [EnumMember(Value = "oval_filled")]
            Ovalfilled = 6,
            /// <summary>
            /// Enum Arrow for value: arrow
            /// </summary>
            [EnumMember(Value = "arrow")]
            Arrow = 7,
            /// <summary>
            /// Enum Triangle for value: triangle
            /// </summary>
            [EnumMember(Value = "triangle")]
            Triangle = 8,
            /// <summary>
            /// Enum Trianglefilled for value: triangle_filled
            /// </summary>
            [EnumMember(Value = "triangle_filled")]
            Trianglefilled = 9,
            /// <summary>
            /// Enum Erdone for value: erd_one
            /// </summary>
            [EnumMember(Value = "erd_one")]
            Erdone = 10,
            /// <summary>
            /// Enum Erdmany for value: erd_many
            /// </summary>
            [EnumMember(Value = "erd_many")]
            Erdmany = 11,
            /// <summary>
            /// Enum Erdonlyone for value: erd_only_one
            /// </summary>
            [EnumMember(Value = "erd_only_one")]
            Erdonlyone = 12,
            /// <summary>
            /// Enum Erdzeroorone for value: erd_zero_or_one
            /// </summary>
            [EnumMember(Value = "erd_zero_or_one")]
            Erdzeroorone = 13,
            /// <summary>
            /// Enum Erdoneormany for value: erd_one_or_many
            /// </summary>
            [EnumMember(Value = "erd_one_or_many")]
            Erdoneormany = 14,
            /// <summary>
            /// Enum Erdzeroormany for value: erd_zero_or_many
            /// </summary>
            [EnumMember(Value = "erd_zero_or_many")]
            Erdzeroormany = 15        }
        /// <summary>
        /// The decoration cap of the connector end, like an arrow or circle. Default: stealth.
        /// </summary>
        /// <value>The decoration cap of the connector end, like an arrow or circle. Default: stealth.</value>
        [DataMember(Name="endStrokeCap", EmitDefaultValue=false)]
        public EndStrokeCapEnum? EndStrokeCap { get; set; }
        /// <summary>
        /// The decoration cap of the connector end, like an arrow or circle. Default: none.
        /// </summary>
        /// <value>The decoration cap of the connector end, like an arrow or circle. Default: none.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StartStrokeCapEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            /// <summary>
            /// Enum Stealth for value: stealth
            /// </summary>
            [EnumMember(Value = "stealth")]
            Stealth = 2,
            /// <summary>
            /// Enum Diamond for value: diamond
            /// </summary>
            [EnumMember(Value = "diamond")]
            Diamond = 3,
            /// <summary>
            /// Enum Diamondfilled for value: diamond_filled
            /// </summary>
            [EnumMember(Value = "diamond_filled")]
            Diamondfilled = 4,
            /// <summary>
            /// Enum Oval for value: oval
            /// </summary>
            [EnumMember(Value = "oval")]
            Oval = 5,
            /// <summary>
            /// Enum Ovalfilled for value: oval_filled
            /// </summary>
            [EnumMember(Value = "oval_filled")]
            Ovalfilled = 6,
            /// <summary>
            /// Enum Arrow for value: arrow
            /// </summary>
            [EnumMember(Value = "arrow")]
            Arrow = 7,
            /// <summary>
            /// Enum Triangle for value: triangle
            /// </summary>
            [EnumMember(Value = "triangle")]
            Triangle = 8,
            /// <summary>
            /// Enum Trianglefilled for value: triangle_filled
            /// </summary>
            [EnumMember(Value = "triangle_filled")]
            Trianglefilled = 9,
            /// <summary>
            /// Enum Erdone for value: erd_one
            /// </summary>
            [EnumMember(Value = "erd_one")]
            Erdone = 10,
            /// <summary>
            /// Enum Erdmany for value: erd_many
            /// </summary>
            [EnumMember(Value = "erd_many")]
            Erdmany = 11,
            /// <summary>
            /// Enum Erdonlyone for value: erd_only_one
            /// </summary>
            [EnumMember(Value = "erd_only_one")]
            Erdonlyone = 12,
            /// <summary>
            /// Enum Erdzeroorone for value: erd_zero_or_one
            /// </summary>
            [EnumMember(Value = "erd_zero_or_one")]
            Erdzeroorone = 13,
            /// <summary>
            /// Enum Erdoneormany for value: erd_one_or_many
            /// </summary>
            [EnumMember(Value = "erd_one_or_many")]
            Erdoneormany = 14,
            /// <summary>
            /// Enum Erdzeroormany for value: erd_zero_or_many
            /// </summary>
            [EnumMember(Value = "erd_zero_or_many")]
            Erdzeroormany = 15        }
        /// <summary>
        /// The decoration cap of the connector end, like an arrow or circle. Default: none.
        /// </summary>
        /// <value>The decoration cap of the connector end, like an arrow or circle. Default: none.</value>
        [DataMember(Name="startStrokeCap", EmitDefaultValue=false)]
        public StartStrokeCapEnum? StartStrokeCap { get; set; }
        /// <summary>
        /// The stroke pattern of the connector line. Default: normal.
        /// </summary>
        /// <value>The stroke pattern of the connector line. Default: normal.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StrokeStyleEnum
        {
            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 1,
            /// <summary>
            /// Enum Dotted for value: dotted
            /// </summary>
            [EnumMember(Value = "dotted")]
            Dotted = 2,
            /// <summary>
            /// Enum Dashed for value: dashed
            /// </summary>
            [EnumMember(Value = "dashed")]
            Dashed = 3        }
        /// <summary>
        /// The stroke pattern of the connector line. Default: normal.
        /// </summary>
        /// <value>The stroke pattern of the connector line. Default: normal.</value>
        [DataMember(Name="strokeStyle", EmitDefaultValue=false)]
        public StrokeStyleEnum? StrokeStyle { get; set; }
        /// <summary>
        /// The captions orientation relatively to the connector line curvature. Default: aligned.
        /// </summary>
        /// <value>The captions orientation relatively to the connector line curvature. Default: aligned.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TextOrientationEnum
        {
            /// <summary>
            /// Enum Horizontal for value: horizontal
            /// </summary>
            [EnumMember(Value = "horizontal")]
            Horizontal = 1,
            /// <summary>
            /// Enum Aligned for value: aligned
            /// </summary>
            [EnumMember(Value = "aligned")]
            Aligned = 2        }
        /// <summary>
        /// The captions orientation relatively to the connector line curvature. Default: aligned.
        /// </summary>
        /// <value>The captions orientation relatively to the connector line curvature. Default: aligned.</value>
        [DataMember(Name="textOrientation", EmitDefaultValue=false)]
        public TextOrientationEnum? TextOrientation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorStyle" /> class.
        /// </summary>
        /// <param name="color">Hex value representing the color for the captions on the connector. Default: &#x60;#1a1a1a&#x60;.</param>
        /// <param name="endStrokeCap">The decoration cap of the connector end, like an arrow or circle. Default: stealth..</param>
        /// <param name="fontSize">Defines the font size, in dp, for the captions on the connector. Default: 14.</param>
        /// <param name="startStrokeCap">The decoration cap of the connector end, like an arrow or circle. Default: none..</param>
        /// <param name="strokeColor">Hex value of the color of the connector line. Default: #000000..</param>
        /// <param name="strokeStyle">The stroke pattern of the connector line. Default: normal..</param>
        /// <param name="strokeWidth">The thickness of the connector line, in dp. Default: 1.0..</param>
        /// <param name="textOrientation">The captions orientation relatively to the connector line curvature. Default: aligned..</param>
        public ConnectorStyle(string color = default(string), EndStrokeCapEnum? endStrokeCap = default(EndStrokeCapEnum?), string fontSize = default(string), StartStrokeCapEnum? startStrokeCap = default(StartStrokeCapEnum?), string strokeColor = default(string), StrokeStyleEnum? strokeStyle = default(StrokeStyleEnum?), string strokeWidth = default(string), TextOrientationEnum? textOrientation = default(TextOrientationEnum?))
        {
            this.Color = color;
            this.EndStrokeCap = endStrokeCap;
            this.FontSize = fontSize;
            this.StartStrokeCap = startStrokeCap;
            this.StrokeColor = strokeColor;
            this.StrokeStyle = strokeStyle;
            this.StrokeWidth = strokeWidth;
            this.TextOrientation = textOrientation;
        }
        
        /// <summary>
        /// Hex value representing the color for the captions on the connector. Default: &#x60;#1a1a1a&#x60;
        /// </summary>
        /// <value>Hex value representing the color for the captions on the connector. Default: &#x60;#1a1a1a&#x60;</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }


        /// <summary>
        /// Defines the font size, in dp, for the captions on the connector. Default: 14
        /// </summary>
        /// <value>Defines the font size, in dp, for the captions on the connector. Default: 14</value>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public string FontSize { get; set; }


        /// <summary>
        /// Hex value of the color of the connector line. Default: #000000.
        /// </summary>
        /// <value>Hex value of the color of the connector line. Default: #000000.</value>
        [DataMember(Name="strokeColor", EmitDefaultValue=false)]
        public string StrokeColor { get; set; }


        /// <summary>
        /// The thickness of the connector line, in dp. Default: 1.0.
        /// </summary>
        /// <value>The thickness of the connector line, in dp. Default: 1.0.</value>
        [DataMember(Name="strokeWidth", EmitDefaultValue=false)]
        public string StrokeWidth { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectorStyle {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  EndStrokeCap: ").Append(EndStrokeCap).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  StartStrokeCap: ").Append(StartStrokeCap).Append("\n");
            sb.Append("  StrokeColor: ").Append(StrokeColor).Append("\n");
            sb.Append("  StrokeStyle: ").Append(StrokeStyle).Append("\n");
            sb.Append("  StrokeWidth: ").Append(StrokeWidth).Append("\n");
            sb.Append("  TextOrientation: ").Append(TextOrientation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorStyle);
        }

        /// <summary>
        /// Returns true if ConnectorStyle instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorStyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorStyle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.EndStrokeCap == input.EndStrokeCap ||
                    (this.EndStrokeCap != null &&
                    this.EndStrokeCap.Equals(input.EndStrokeCap))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.StartStrokeCap == input.StartStrokeCap ||
                    (this.StartStrokeCap != null &&
                    this.StartStrokeCap.Equals(input.StartStrokeCap))
                ) && 
                (
                    this.StrokeColor == input.StrokeColor ||
                    (this.StrokeColor != null &&
                    this.StrokeColor.Equals(input.StrokeColor))
                ) && 
                (
                    this.StrokeStyle == input.StrokeStyle ||
                    (this.StrokeStyle != null &&
                    this.StrokeStyle.Equals(input.StrokeStyle))
                ) && 
                (
                    this.StrokeWidth == input.StrokeWidth ||
                    (this.StrokeWidth != null &&
                    this.StrokeWidth.Equals(input.StrokeWidth))
                ) && 
                (
                    this.TextOrientation == input.TextOrientation ||
                    (this.TextOrientation != null &&
                    this.TextOrientation.Equals(input.TextOrientation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.EndStrokeCap != null)
                    hashCode = hashCode * 59 + this.EndStrokeCap.GetHashCode();
                if (this.FontSize != null)
                    hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                if (this.StartStrokeCap != null)
                    hashCode = hashCode * 59 + this.StartStrokeCap.GetHashCode();
                if (this.StrokeColor != null)
                    hashCode = hashCode * 59 + this.StrokeColor.GetHashCode();
                if (this.StrokeStyle != null)
                    hashCode = hashCode * 59 + this.StrokeStyle.GetHashCode();
                if (this.StrokeWidth != null)
                    hashCode = hashCode * 59 + this.StrokeWidth.GetHashCode();
                if (this.TextOrientation != null)
                    hashCode = hashCode * 59 + this.TextOrientation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
