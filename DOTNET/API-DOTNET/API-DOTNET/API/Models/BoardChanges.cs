/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BoardChanges
    /// </summary>
    [DataContract]
        public partial class BoardChanges :  IEquatable<BoardChanges>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardChanges" /> class.
        /// </summary>
        /// <param name="description">Description of the board..</param>
        /// <param name="name">Name for the board. (default to &quot;Untitled&quot;).</param>
        /// <param name="policy">policy.</param>
        /// <param name="teamId">Unique identifier (ID) of the team where the board must be placed..</param>
        /// <param name="projectId">Unique identifier (ID) of the project to which the board must be added. Note that projects are not available on &lt;a href&#x3D;\&quot;https://help.miro.com/hc/en-us/articles/360017730373\&quot; target&#x3D;\&quot;blank\&quot;&gt;Free plan&lt;/a&gt;. If you downgraded to &lt;a href&#x3D;\&quot;https://help.miro.com/hc/en-us/articles/360017730373\&quot; target&#x3D;\&quot;blank\&quot;&gt;Free plan&lt;/a&gt;, you cannot use projects unless you upgrade. For more information, see our &lt;a href&#x3D;\&quot;https://help.miro.com/hc/en-us/articles/360018262033-Projects\&quot; target&#x3D;\&quot;blank\&quot;&gt;Help Center page on Projects&lt;/a&gt;..</param>
        public BoardChanges(string description = default(string), string name = "Untitled", BoardPolicyChange policy = default(BoardPolicyChange), string teamId = default(string), string projectId = default(string))
        {
            this.Description = description;
            // use default value if no "name" provided
            if (name == null)
            {
                this.Name = "Untitled";
            }
            else
            {
                this.Name = name;
            }
            this.Policy = policy;
            this.TeamId = teamId;
            this.ProjectId = projectId;
        }
        
        /// <summary>
        /// Description of the board.
        /// </summary>
        /// <value>Description of the board.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Name for the board.
        /// </summary>
        /// <value>Name for the board.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name="policy", EmitDefaultValue=false)]
        public BoardPolicyChange Policy { get; set; }

        /// <summary>
        /// Unique identifier (ID) of the team where the board must be placed.
        /// </summary>
        /// <value>Unique identifier (ID) of the team where the board must be placed.</value>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// Unique identifier (ID) of the project to which the board must be added. Note that projects are not available on &lt;a href&#x3D;\&quot;https://help.miro.com/hc/en-us/articles/360017730373\&quot; target&#x3D;\&quot;blank\&quot;&gt;Free plan&lt;/a&gt;. If you downgraded to &lt;a href&#x3D;\&quot;https://help.miro.com/hc/en-us/articles/360017730373\&quot; target&#x3D;\&quot;blank\&quot;&gt;Free plan&lt;/a&gt;, you cannot use projects unless you upgrade. For more information, see our &lt;a href&#x3D;\&quot;https://help.miro.com/hc/en-us/articles/360018262033-Projects\&quot; target&#x3D;\&quot;blank\&quot;&gt;Help Center page on Projects&lt;/a&gt;.
        /// </summary>
        /// <value>Unique identifier (ID) of the project to which the board must be added. Note that projects are not available on &lt;a href&#x3D;\&quot;https://help.miro.com/hc/en-us/articles/360017730373\&quot; target&#x3D;\&quot;blank\&quot;&gt;Free plan&lt;/a&gt;. If you downgraded to &lt;a href&#x3D;\&quot;https://help.miro.com/hc/en-us/articles/360017730373\&quot; target&#x3D;\&quot;blank\&quot;&gt;Free plan&lt;/a&gt;, you cannot use projects unless you upgrade. For more information, see our &lt;a href&#x3D;\&quot;https://help.miro.com/hc/en-us/articles/360018262033-Projects\&quot; target&#x3D;\&quot;blank\&quot;&gt;Help Center page on Projects&lt;/a&gt;.</value>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoardChanges {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoardChanges);
        }

        /// <summary>
        /// Returns true if BoardChanges instances are equal
        /// </summary>
        /// <param name="input">Instance of BoardChanges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoardChanges input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Policy != null)
                    hashCode = hashCode * 59 + this.Policy.GetHashCode();
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
