/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains the connector&#x27;s caption data, such as content and its position.
    /// </summary>
    [DataContract]
        public partial class Caption :  IEquatable<Caption>, IValidatableObject
    {
        /// <summary>
        /// The vertical position of the text on the connector. Default: middle
        /// </summary>
        /// <value>The vertical position of the text on the connector. Default: middle</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TextAlignVerticalEnum
        {
            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 1,
            /// <summary>
            /// Enum Middle for value: middle
            /// </summary>
            [EnumMember(Value = "middle")]
            Middle = 2,
            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 3        }
        /// <summary>
        /// The vertical position of the text on the connector. Default: middle
        /// </summary>
        /// <value>The vertical position of the text on the connector. Default: middle</value>
        [DataMember(Name="textAlignVertical", EmitDefaultValue=false)]
        public TextAlignVerticalEnum? TextAlignVertical { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Caption" /> class.
        /// </summary>
        /// <param name="content">The text you want to display on the connector. Supports inline HTML tags. (required).</param>
        /// <param name="position">The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%.</param>
        /// <param name="textAlignVertical">The vertical position of the text on the connector. Default: middle.</param>
        public Caption(string content = default(string), string position = default(string), TextAlignVerticalEnum? textAlignVertical = default(TextAlignVerticalEnum?))
        {
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new InvalidDataException("content is a required property for Caption and cannot be null");
            }
            else
            {
                this.Content = content;
            }
            this.Position = position;
            this.TextAlignVertical = textAlignVertical;
        }
        
        /// <summary>
        /// The text you want to display on the connector. Supports inline HTML tags.
        /// </summary>
        /// <value>The text you want to display on the connector. Supports inline HTML tags.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%
        /// </summary>
        /// <value>The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Caption {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  TextAlignVertical: ").Append(TextAlignVertical).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Caption);
        }

        /// <summary>
        /// Returns true if Caption instances are equal
        /// </summary>
        /// <param name="input">Instance of Caption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Caption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.TextAlignVertical == input.TextAlignVertical ||
                    (this.TextAlignVertical != null &&
                    this.TextAlignVertical.Equals(input.TextAlignVertical))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.TextAlignVertical != null)
                    hashCode = hashCode * 59 + this.TextAlignVertical.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
