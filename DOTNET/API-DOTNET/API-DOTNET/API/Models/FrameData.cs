/* 
 * Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains frame item data, such as the title, frame type, or frame format.
    /// </summary>
    [DataContract]
        public partial class FrameData :  IEquatable<FrameData>, IValidatableObject
    {
        /// <summary>
        /// Only custom frames are supported at the moment.
        /// </summary>
        /// <value>Only custom frames are supported at the moment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FormatEnum
        {
            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 1,
            /// <summary>
            /// Enum Desktop for value: desktop
            /// </summary>
            [EnumMember(Value = "desktop")]
            Desktop = 2,
            /// <summary>
            /// Enum Phone for value: phone
            /// </summary>
            [EnumMember(Value = "phone")]
            Phone = 3,
            /// <summary>
            /// Enum Tablet for value: tablet
            /// </summary>
            [EnumMember(Value = "tablet")]
            Tablet = 4,
            /// <summary>
            /// Enum A4 for value: a4
            /// </summary>
            [EnumMember(Value = "a4")]
            A4 = 5,
            /// <summary>
            /// Enum Letter for value: letter
            /// </summary>
            [EnumMember(Value = "letter")]
            Letter = 6,
            /// <summary>
            /// Enum Ratio1x1 for value: ratio_1x1
            /// </summary>
            [EnumMember(Value = "ratio_1x1")]
            Ratio1x1 = 7,
            /// <summary>
            /// Enum Ratio4x3 for value: ratio_4x3
            /// </summary>
            [EnumMember(Value = "ratio_4x3")]
            Ratio4x3 = 8,
            /// <summary>
            /// Enum Ratio16x9 for value: ratio_16x9
            /// </summary>
            [EnumMember(Value = "ratio_16x9")]
            Ratio16x9 = 9        }
        /// <summary>
        /// Only custom frames are supported at the moment.
        /// </summary>
        /// <value>Only custom frames are supported at the moment.</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Only free form frames are supported at the moment.
        /// </summary>
        /// <value>Only free form frames are supported at the moment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Freeform for value: freeform
            /// </summary>
            [EnumMember(Value = "freeform")]
            Freeform = 1,
            /// <summary>
            /// Enum Heap for value: heap
            /// </summary>
            [EnumMember(Value = "heap")]
            Heap = 2,
            /// <summary>
            /// Enum Grid for value: grid
            /// </summary>
            [EnumMember(Value = "grid")]
            Grid = 3,
            /// <summary>
            /// Enum Rows for value: rows
            /// </summary>
            [EnumMember(Value = "rows")]
            Rows = 4,
            /// <summary>
            /// Enum Columns for value: columns
            /// </summary>
            [EnumMember(Value = "columns")]
            Columns = 5        }
        /// <summary>
        /// Only free form frames are supported at the moment.
        /// </summary>
        /// <value>Only free form frames are supported at the moment.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FrameData" /> class.
        /// </summary>
        /// <param name="format">Only custom frames are supported at the moment. (default to FormatEnum.Custom).</param>
        /// <param name="title">Title of the frame. This title appears at the top of the frame..</param>
        /// <param name="type">Only free form frames are supported at the moment. (default to TypeEnum.Freeform).</param>
        public FrameData(FormatEnum? format = FormatEnum.Custom, string title = default(string), TypeEnum? type = TypeEnum.Freeform)
        {
            // use default value if no "format" provided
            if (format == null)
            {
                this.Format = FormatEnum.Custom;
            }
            else
            {
                this.Format = format;
            }
            this.Title = title;
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = TypeEnum.Freeform;
            }
            else
            {
                this.Type = type;
            }
        }
        

        /// <summary>
        /// Title of the frame. This title appears at the top of the frame.
        /// </summary>
        /// <value>Title of the frame. This title appears at the top of the frame.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FrameData {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FrameData);
        }

        /// <summary>
        /// Returns true if FrameData instances are equal
        /// </summary>
        /// <param name="input">Instance of FrameData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FrameData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
